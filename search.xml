<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GRASP软件设计的模式和原则</title>
      <link href="2021/05/08/GRASP%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%8E%9F%E5%88%99/"/>
      <url>2021/05/08/GRASP%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h4 id="GRASP是General-Responsibility-Assignment-Software-patterns（通用职责分配软件模式）的简称，它的核心思想是“职责分配（Responsibility-Assignment）”。GRASP提出了几个基本原则，用来解决面向对象设计的一些问题。"><a href="#GRASP是General-Responsibility-Assignment-Software-patterns（通用职责分配软件模式）的简称，它的核心思想是“职责分配（Responsibility-Assignment）”。GRASP提出了几个基本原则，用来解决面向对象设计的一些问题。" class="headerlink" title="GRASP是General Responsibility Assignment Software patterns（通用职责分配软件模式）的简称，它的核心思想是“职责分配（Responsibility Assignment）”。GRASP提出了几个基本原则，用来解决面向对象设计的一些问题。"></a>GRASP是General Responsibility Assignment Software patterns（通用职责分配软件模式）的简称，它的核心思想是“职责分配（Responsibility Assignment）”。GRASP提出了几个基本原则，用来解决面向对象设计的一些问题。</h4><hr><p>Craig Larman氏在《Applying UML and Patterns》一书中提出了GRASP设计模式的概念。作者称其为设计模式，其实，更好的理解应该为设计原则。因为，与GoF等设计模式不同的是，GoF等设计模式是针对特定问题而提出的解决方法，而GRASP则是站在面向对象设计的角度，告诉我们怎么样设计问题空间中的类与它们的行为责任，以及明确类之间的相互关系等等。GRASP可以说是GoF等设计模式的基础。它的核心思想是“职责分配（Responsibility Assignment）”，用职责设计对象：”Designing Objects with Responsibilities”。它包含了9个基本模式：</p><ul><li>信息专家(Information expert)</li></ul><p>信息专家模式是面向对象设计的最基本原则。通俗点来讲，就是一个类只干该干的事情，不该干的事情不干。在系统设计时，需要将职责分配给具有实现这个职责所需要信息的类。信息专家模式对应于面向对象设计原则中的单一职责原则。</p><ul><li>创建者（Creator) </li></ul><p>如果一个类创建了另一个类，那么这两个类之间就有了耦合，也可以说产生了依赖关系。依赖或耦合本身是没有错误的，但是它们带来的问题就是在以后的维护中会产生连锁反应，而必要的耦合是逃不掉的，我们能做的就是正确地创建耦合关系，不要随便建立类之间的依赖关系，那么该如何去做呢？就是要遵守创建者模式规定的基本原则，凡是不符合以上条件的情况，都不能随便用A创建B。<br>创建对象是面向对象系统中最普遍的活动之一，因此，确定一个分配创建对象的通用职责非常重要。如果职责分配合理，设计就能降低耦合，提高设计的清晰度、封装性和重用性。通常情况下，如果对象的创建过程不是很复杂，则根据上述原则，由使用对象的类来创建对象。但是如果创建过程非常复杂，而且可能需要重复使用对象实例或者需要从外部注入一个对象实例，此时，可以委托一个专门的工厂类来辅助创建对象。创建者模式与各种工厂模式（简单工厂模式、工厂方法模式和抽象工厂模式）相对应。</p><ul><li>高内聚(High Cohesion)</li></ul><p>内聚是评价一个元素的职责被关联和关注强弱的尺度。如果一个元素具有很多紧密相关的职责，而且只完成有限的功能，则这个元素就具有高内聚性。此处的元素可以是类，也可以是模块、子系统或者系统。在一个低内聚的类中会执行很多互不相关的操作，这将导致系统难于理解、难于重用、难于维护、过于脆弱，容易受到变化带来的影响。因此我们需要控制类的粒度，在分配类的职责时使其内聚保持为最高，提高类的重用性，控制类设计的复杂程度。为了达到低内聚，我们需要对类进行分解，使得分解出来的类具有独立的职责，满足单一职责原则。在一个类中只保留一组相关的属性和方法，将一些需要在多个类中重用的属性和方法或完成其他功能所需的属性和方法封装在其他类中。类只处理与之相关的功能，它将与其他类协作完成复杂的任务。</p><ul><li>低耦合(Low coupling)</li></ul><p>耦合是评价一个系统中各个元素之间连接或依赖强弱关系的尺度，具有低耦合的元素不过多依赖其他元素。此处的元素可以是类，也可以是模块、子系统或者系统。具有高耦合的类过多地依赖其他类，这种设计将会导致：一个类的修改导致其他类产生较大影响；系统难以维护和理解；系统重用性差，在重用一个高耦合的类时不得不重用它所依赖的其他类。因此需要对高耦合的系统进行重构。</p><ul><li>控制器(Controller)</li></ul><p>一个控制器是负责接收或者处理系统事件的非图形用户界面对象。一个控制器定义一组系统操作方法。在控制器模式中，要求系统事件的接收与处理通常由一个高级类来代替；一个子系统需要定义多个控制器，分别对应不同的事务处理。通常，一个控制器应当把要完成的功能委托给其他对象，它只负责协调和控制，本身不完成太多的功能。它可以将用户界面所提交的请求转发给其他类来处理，控制器可以重用，且不能包含太多业务逻辑，一个系统通常也不能设计一个统一的控制器。控制器模式与MVC模式相对应，MVC是一种比设计模式更加高级的架构模式。  </p><ul><li>多态性(Polymorphism)</li></ul><p>由条件变化引发同一类型的不同行为是程序的一个基本主题。如果用if-else或switch-case等条件语句来设计程序，当系统发生变化时必须修改程序的业务逻辑，这将导致很难方便地扩展有新变化的程序。另外对于服务器/客户端结构中的可视化组件，有时候需要在不影响客户端的前提下，将服务器的一个组件替换成另一个组件。此时可以使用多态来实现，将不同的行为指定给不同的子类，多态是设计系统如何处理相似变化的基本方法，基于多态分配职责的设计可以方便地处理新的变化。</p><ul><li>纯虚构(Pure Fabrication)</li></ul><p>纯虚构模式用于解决高内聚和低耦合之间的矛盾，它要求将一部分类的职责转移到纯虚构类中，在理想情况下，分配给这种虚构类的职责是为了达到高内聚和低耦合的目的。在实际操作过程中，纯虚构有很多种实现方式，例如将数据库操作的方法从数据库实体类中剥离出来，形成专门的数据访问类，通过对类的分解来实现类的重用，新增加的数据访问类对应于数据持久化存储，它不是问题域中的概念，而是软件开发者为了处理方便而产生的虚构概念。纯虚构可以消除由于信息专家模式带来的低内聚和高耦合的坏设计，得到一个具有更好重用性的设计。</p><ul><li> 间接性(Indirection)</li></ul><p>要避免对象之间的直接耦合，最常用的做法是在对象之间引入一个中间对象或中介对象，通过中介对象来间接相连。中介模式对应于面向对象设计原则中的迪米特法则，在外观模式、代理模式、中介者模式等设计模式中都体现了中介模式。</p><ul><li>变化预防(Protected Variations)</li></ul><p>找出预计有变化或不稳定的元素，为其创建稳定的“接口”而分配职责。受保护变化模式简称PV，它是大多数编程和设计的基础，是模式的基本动机之一，它使系统能够适应和隔离变化。它与面向对象设计原则中的开闭原则相对应，即在不修改原有元素（类、模块、子系统或系统）的前提下扩展元素的功能。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件复用(SoftWare Reuse)</title>
      <link href="2021/05/06/%E5%8F%AF%E5%A4%8D%E7%94%A8%E8%BD%AF%E4%BB%B6%EF%BC%88SoftWare%20Reuse%EF%BC%89/"/>
      <url>2021/05/06/%E5%8F%AF%E5%A4%8D%E7%94%A8%E8%BD%AF%E4%BB%B6%EF%BC%88SoftWare%20Reuse%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是复用？"><a href="#什么是复用？" class="headerlink" title="什么是复用？"></a>什么是复用？</h4><p>软件复用(SoftWare Reuse)是将已有软件的各种有关知识用于建立新的软件,以缩减软件开发和维护的花费。软件复用是提高软件生产力和质量的一种重要技术。早期的软件复用主要是代码级复用，被复用的知识专指程序，后来扩大到包括领域知识、开发经验、设计决定、体系结构、需求、设计、代码和文档等一切有关方面。</p><h4 id="复用的级别："><a href="#复用的级别：" class="headerlink" title="复用的级别："></a>复用的级别：</h4><p>   (1）代码的复用</p><blockquote><p>包括目标代码和源代码的复用。其中目标代码的复用级别最低，历史也最久，当前大部分编程语言的运行支持系统都提供了连接（Link）、绑定(Binding)等功能来支持这种复用。</p></blockquote><p>（2）设计的复用</p><blockquote><p>设计结果比源程序的抽象级别更高，因此它的复用受实现环境的影响较少，从而使可复用构件被复用的机会更多，并且所需的修改更少。这种复用有三种途径，第一种途径是从现有系统的设计结果中提取一些可复用的设计构件，并把这些构件应用于新系统的设计；第二种途径是把一个现有系统的全部设计文档在新的软硬件平台上重新实现，也就是把一个设计运用于多个具体的实现；第三种途径是独立于任何具体的应用，有计划地开发一些可复用的设计构件。</p></blockquote><p>（3）分析的复用</p><blockquote><p>这是比设计结果更高级别的复用，可复用的分析构件是针对问题域的某些事物或某些问题的抽象程度更高的解法，受设计技术及实现条件的影响很少，所以可复用的机会更大。复用的途径也有三种，即从现有系统的分析结果中提取可复用构件用于新系统的分析；用一份完整的分析文档作输入产生针对不同软硬件平台和其它实现条件的多项设计；独立于具体应用，专门开发一些可复用的分析构件。</p></blockquote><p>（4）测试信息的复用</p><blockquote><p>主要包括测试用例的复用和测试过程信息的复用。</p></blockquote><h4 id="类的层面"><a href="#类的层面" class="headerlink" title="类的层面"></a>类的层面</h4><p>继承：<br>面向对象的开发语言中自然少不了继承，有了继承，就可以使子类拥有父类的属性和方法，这也是一种复用，甚至可以说是十分重要的一种复用，子类可以不用将某些方法<br>委托<br>在java中类直接调用这个类的static方法，类似c语言中的函数，直接调用就行，这样也是一种类的复用。类似Math.sprt()这种方法。<br>API层面<br>API应该做一件事，且做得很好</p><p>API应该尽可能小，但不能太小</p><p>Implementation不应该影响API</p><p>类的设计：尽量减少可变性，遵循LSP原则</p><p>方法的设计：不要让客户做任何模块可以做的事情，及时报错</p><p>LPS原则<br>定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p><p>定义2：所有引用基类的地方必须能透明地使用其子类的对象。</p><p>问题由来：<br>有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后 的功 能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。</p><p>解决方案：<br>当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法</p><p>LSP依赖于以下限制：<br>前置条件不能强化<br>后置条件不能弱化<br>不变量要保持<br>子类型方法参数：逆变<br>子类型方法的返回值：协变<br>异常类型：协变</p><h4 id="框架层面"><a href="#框架层面" class="headerlink" title="框架层面"></a>框架层面</h4><p>框架：一组具体类、抽象类、及其之间的连接关系<br>开发者根据 framework的规约，填充自己的代码进去，形成完整系统。通常通过选择性覆盖来扩展框架;或者程序员可以添加专门的用户代码来提供特定的功能—即定义继承了抽象类祖先操作的具体类 Hook方法，它被应用程序覆盖以扩展框架。Hook方法系统地将应用程序域的接口和行为与应用程序在特定上下文中所需的变体解耦。 控制反转：与库或标准用户应用程序不同，控制流不是由调用者决定的，而是由框架决定的。不可修改的框架代码：在接受用户实现的扩展时，框架代码不应该被修改。换句话说，用户可以扩展框架，但不应修改其代码。<br>常见的框架类似于spring框架这种，spring框架代码不能修改但是拥有DI,IOC，方便用户创建对象，何时创建对象，交给系统来判断，用户只需要使用对象就行了。<br>类型也有两种：<br>白盒复用：源代码可见，可修改和扩展，复制已有代码当正在开发的系统，进行修改<br>优点：可定制化程度高<br>缺点： 对其修改增加了软件的复杂度，且需要对其内部充分的了解<br>黑盒复用：源代码不可见，不能修改，只能通过API接口来使用，无法修改代码<br>优点：简单清晰<br>缺点：适应性差</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java后端 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch安装及集群配置</title>
      <link href="2021/04/25/ElasticSearch%E5%AE%89%E8%A3%85%E5%8F%8A%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
      <url>2021/04/25/ElasticSearch%E5%AE%89%E8%A3%85%E5%8F%8A%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。<br>特点：</p><ul><li>分布式的实时文件存储，每个字段都被索引并可被搜索</li><li>分布式的实时分析搜索引擎–做不规则查询</li><li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据<br>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</li></ul><p><strong>准备工作</strong><br>安装Centos7、建议内存2G以上、安装java1.8环境<br>配置文件：elasticsearch.yml(集群配置文件)、jvm.options(jvm配置文件)</p><p>1、添加用户</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# adduser es</span><br><span class="line">[root@localhost ~]# passwd es</span><br></pre></td></tr></table></figure><p>==为es用户授予权限==</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# whereis sudoers</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ls -l /etc/sudoers</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vi /etc/sudoers</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Allow root to run any commands anywher  </span><br><span class="line">root    ALL=(ALL)       ALL  </span><br><span class="line">es  ALL=(ALL)       ALL  #这个是新增的用户</span><br></pre></td></tr></table></figure><p>在保存退出时遇到如下提示是因为这个文件只有可读权限造成的可以通过：==：wq==强制保存退出<br><img src="https://img-blog.csdnimg.cn/20200425170419359.png" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# chmod -v u-w /etc/sudoers</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# su es</span><br></pre></td></tr></table></figure><p>2、Java环境安装<br>解压安装包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jdk1.8]# tar -zxvf jdk-8u171-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>设置Java环境变量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jdk1.8.0_171]# vi /etc/profile</span><br></pre></td></tr></table></figure><p>在文件最后添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/elk1/jdk1<span class="number">.8</span>/jdk1<span class="number">.8</span><span class="number">.0_171</span></span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/LIB:$JRE_HOME/LIB:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">[root@localhost jdk1.8.0_171]# source /etc/profile</span><br><span class="line">[root@localhost jdk1.8.0_171]# java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_171&quot;</span></span><br><span class="line">Java(TM) <span class="function">SE Runtime <span class="title">Environment</span> <span class="params">(build <span class="number">1.8</span><span class="number">.0_171</span>-b11)</span></span></span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(build <span class="number">25.171</span>-b11, mixed mode)</span></span></span><br></pre></td></tr></table></figure><p><strong>ElasticSerach单机安装</strong><br>上传elasticsearch安装包到如下目录并解压<br>/home/elk/soft</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost elasticserach]# tar -zxvf elasticsearch-6.3.1.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost elasticserach]# cd elasticsearch-6.3.1/bin</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./elasticsearch</span><br></pre></td></tr></table></figure><p>启动错误1：<br><img src="https://img-blog.csdnimg.cn/20200425163930871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">错误原因：elasticsearch不能以root用户身份启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# su es</span><br><span class="line">[es<span class="meta">@localhost</span> bin]$ ./elasticsearch</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动错误2：<br><img src="https://img-blog.csdnimg.cn/20200425164136680.png" alt="在这里插入图片描述">错误原因：需要在配置文件jvm.options中设置es可使用jvm内存相关参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[es<span class="meta">@localhost</span> bin]$ cd /opt/es/elasticsearch-<span class="number">6.3</span><span class="number">.1</span>/conf</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[es<span class="meta">@localhost</span> bin]$ vim jvm.options</span><br></pre></td></tr></table></figure><p>根据服务器内存对应设置大小，如果服务器内存不够就会报错（这里我们只做实验操作设定为256m）<br><img src="https://img-blog.csdnimg.cn/20200425164745842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>启动错误3：<img src="https://img-blog.csdnimg.cn/20200425172254486.png" alt="在这里插入图片描述">错误原因：使用非root用户启动ES，而该用户的文件权限不足而被拒绝执行。<br>解决方法：给es用户elasticsearch目录的授权</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  chown -R 用户名 文件（目录）名</span></span><br><span class="line">chown -R es /opt/es/elasticsearch-<span class="number">6.3</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425172653803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">启动elasticsearch<br><img src="https://img-blog.csdnimg.cn/20200425173739717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">节点sonofelice上的磁盘空间使用率超过了85%，空闲15.2gb，占总磁盘空间的13.4%。将不会在该节点上分配副本了。<br>虽然不影响es的正常功能使用，如果不想打印：<br>第一种方式，是简单粗暴的在elasticsearch.yml文件中直接加入下面一行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.routing.allocation.disk.threshold_enabled: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>第二种方式，则是自己控制磁盘空间使用率超过多少的时候不再分配副本。默认是85%，所以才会有上面的日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cluster.routing.allocation.disk.threshold_enabled: <span class="keyword">true</span></span><br><span class="line">cluster.routing.allocation.disk.watermark.low: 30gb</span><br><span class="line">cluster.routing.allocation.disk.watermark.high: 20gb</span><br></pre></td></tr></table></figure><p>接下来需要在elasticsearch.yml中配置es的host地址(配置成本机地址，允许访问)<br><img src="https://img-blog.csdnimg.cn/20200425174516271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">配置完之后重新启动elasticsearch<br><img src="https://img-blog.csdnimg.cn/20200425174942709.png" alt="在这里插入图片描述">启动错误4：<br><img src="https://img-blog.csdnimg.cn/20200425175050460.png" alt="在这里插入图片描述">意思是linux能用的最大线程数、最大文件数、最大内存数都不够 。<br>解决方法：修改linux配置文件（配合es的启动）<br>第一步：切换到root用户修改linux的limit配置文件，设置内存线程和文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nofile - 打开文件的最大数目</span><br><span class="line">noproc - 进程的最大数目</span><br><span class="line">soft 指的是当前系统生效的设置值</span><br><span class="line">hard 表明系统中所能设定的最大值</span><br><span class="line">在#End of file之前添加</span><br><span class="line">* hard nofile <span class="number">655360</span></span><br><span class="line">* soft nofile <span class="number">131072</span></span><br><span class="line">* hard nproc <span class="number">4096</span></span><br><span class="line">* soft nproc <span class="number">2048</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425180509792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第二步：修改linux的sysctl配置文件，配置系统使用内存</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=<span class="number">655360</span></span><br><span class="line">fs.file-max=<span class="number">655360</span></span><br><span class="line">vm.max_map_count=<span class="number">655360</span>，因此缺省配置下，单个jvm能开启的最大线程数为其一半</span><br><span class="line">file-max是设置 系统所有进程一共可以打开的文件数量 </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425180814943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">修改完之后不要忘记执行：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# sysctl -p</span><br></pre></td></tr></table></figure><p>最后切换为es用户启动：<br><img src="https://img-blog.csdnimg.cn/20200425181134247.png" alt="在这里插入图片描述">浏览器访问成功：</p><p><img src="https://img-blog.csdnimg.cn/20200425182014461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">也可以使用下面的命令启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./elasticsearch &amp;</span><br></pre></td></tr></table></figure><p>代表控制台将日志收集到.out文件，程序启动后还可以回到命令行继续操作。<br><strong>安装kibana可视化分析elasticsearch:</strong></p><p>上传kibana安装包并解压安装包:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost es]# tar -xzvf kibana-6.3.1-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>配置配置文件:文件安装目录/conf/kibana.yml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost config]# vim kibana.yml</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425215521378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">将上面的localhost也做修改<br><img src="https://img-blog.csdnimg.cn/20200425220648733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>启动kibana：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# nohup ./kibana &amp;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425221353576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">通过浏览器访问成功：<br><img src="https://img-blog.csdnimg.cn/20200425221550906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>安装中英文分词器插件到elasticsearch:</strong><br>直接将分词器插件上传到elasticsearch下面的pugins文件夹内，然后重新启动elasticsearch和kibana<br><img src="https://img-blog.csdnimg.cn/20200425231810157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>IK提供了两个分词算法ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word为最细粒度划分<br>（1）最小切分：</p><p><img src="https://img-blog.csdnimg.cn/20200425232422480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（2）最细切分：<br><img src="https://img-blog.csdnimg.cn/20200425232530674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>elasticsearch集群配置:</strong><br>在生产环境中必需对elasticsearch做集群，只需要在每一台服务器中的es中修改配置文件，es会在集群服务器中选取master结点服务器：<br>修改配置文件elasticserach.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /elasticsearch.yml</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: aubin-cluster     #必须相同 </span><br><span class="line"># 集群名称（不能重复）</span><br><span class="line">node.name: els1（必须不同）</span><br><span class="line"># 节点名称，仅仅是描述名称，用于在日志中区分（自定义）</span><br><span class="line">#指定了该节点可能成为 master 节点，还可以是数据节点</span><br><span class="line">node.master: <span class="keyword">true</span></span><br><span class="line">node.data: <span class="keyword">true</span></span><br><span class="line">path.data: /opt/data</span><br><span class="line"># 数据的默认存放路径（自定义）</span><br><span class="line">path.logs: /opt/logs </span><br><span class="line"># 日志的默认存放路径 </span><br><span class="line">network.host: <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> </span><br><span class="line"># 当前节点的IP地址 </span><br><span class="line">http.port: <span class="number">9200</span> </span><br><span class="line"># 对外提供服务的端口</span><br><span class="line">transport.tcp.port: <span class="number">9300</span></span><br><span class="line">#9300为集群服务的端口 </span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">&quot;172.18.68.11&quot;</span>, <span class="string">&quot;172.18.68.12&quot;</span>,<span class="string">&quot;172.18.68.13&quot;</span>] </span><br><span class="line"># 集群个节点IP地址，也可以使用域名，需要各节点能够解析 </span><br><span class="line">discovery.zen.minimum_master_nodes: <span class="number">2</span> </span><br><span class="line"># 为了避免脑裂，主集群节点数最少为 半数+1</span><br></pre></td></tr></table></figure><p>==冒号后面必须有一个空格==<br>可以使用集群管理工具cerebro对集群进行管理：</p><p>开启后可在localhost：9000端口访问<br><img src="https://img-blog.csdnimg.cn/20200426100330580.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200426100628456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="![在这里插入图片描述](https://img-blog.csdnimg.cn/20200426100452331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> 大数据开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Akka并发编程模型及网络编程</title>
      <link href="2021/04/24/Akka%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>2021/04/24/Akka%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、-并发编程模型："><a href="#一、-并发编程模型：" class="headerlink" title="一、 并发编程模型："></a>一、 并发编程模型：</h3><p>Akka 的介绍:<br><img src="https://img-blog.csdnimg.cn/20200924185648776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="1-1、-Actor-模型用于解决什么问题"><a href="#1-1、-Actor-模型用于解决什么问题" class="headerlink" title="1.1、 Actor 模型用于解决什么问题"></a>1.1、 Actor 模型用于解决什么问题</h4><p><img src="https://img-blog.csdnimg.cn/2020092418575333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="1-2、-Akka-中-Actor-模型详解"><a href="#1-2、-Akka-中-Actor-模型详解" class="headerlink" title="1.2、 Akka 中 Actor 模型详解"></a>1.2、 Akka 中 Actor 模型详解</h4><p><img src="https://img-blog.csdnimg.cn/20200924185835260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>对上图的详解如下：</p><p><img src="https://img-blog.csdnimg.cn/20200924185850689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="1-3、Actor-模型工作机制说明"><a href="#1-3、Actor-模型工作机制说明" class="headerlink" title="1.3、Actor 模型工作机制说明"></a>1.3、Actor 模型工作机制说明</h4><p><img src="https://img-blog.csdnimg.cn/20200924185927538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Actor模型工作机制说明(对照工作机制示意图理解)：</p><p><img src="https://img-blog.csdnimg.cn/20200924185948593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Actor 间传递消息机制(对照工作机制示意图理解):</p><p><img src="https://img-blog.csdnimg.cn/20200924190006223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="Actor-模型应用实例"><a href="#Actor-模型应用实例" class="headerlink" title="Actor 模型应用实例"></a>Actor 模型应用实例</h5><p>  Actor 自我通讯<br><img src="https://img-blog.csdnimg.cn/20200924190119212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2020092419060468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>构建maven项目pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.akka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SayHelloActor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一下常量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.compat.version</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">scala.compat.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">akka.version</span>&gt;</span>2.4.17<span class="tag">&lt;/<span class="name">akka.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加scala的依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 添加akka的actor依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>akka-actor_$&#123;scala.compat.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;akka.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 多进程之间的Actor通信 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>akka-remote_$&#123;scala.compat.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;akka.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定源码包和测试包的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/main/scala<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>src/test/scala<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定编译scala的插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-dependencyfile<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>$&#123;project.build.directory&#125;/.scala_dependencies<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- maven打包的插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                &lt;transformer</span><br><span class="line">                                        implementation=&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;&gt;</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span>reference.conf<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!-- 指定main方法 --&gt;</span></span><br><span class="line">                                &lt;transformer</span><br><span class="line">                                        implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.actor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorRef</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 当我们继承 Actor 后，就是一个 Actor，需要重写该 Actor 的核心方法 receive</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayHelloActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 循环的接收消息</span></span><br><span class="line">  <span class="comment">// 1. receive方法，会被该 Actor 的 MailBox(实现了 Runnable 接口)调用</span></span><br><span class="line">  <span class="comment">// 2. 当该 Actor 的 MailBox 接收到消息，就会调用 receive 方法</span></span><br><span class="line">  <span class="comment">// 3. Receive 的底层：type Receive = PartialFunction[Any, Unit]</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="comment">// 接受消息并处理，如果接收到 exit，就退出</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span> =&gt; println(<span class="string">&quot;发送：hello\t\t回应：hello too:)&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;ok&quot;</span> =&gt; println(<span class="string">&quot;发送：ok\t\t\t回应：ok too:)&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;exit&quot;</span> =&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;接收到exit~指令，退出系统...&quot;</span>)</span><br><span class="line">      context.stop(self) <span class="comment">// 停止自己的 ActorRef</span></span><br><span class="line">      context.system.terminate() <span class="comment">// 关闭 ActorSystem</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SayHelloActor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 先创建一个 ActorSystem，专门用于创建 Actor</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> actoryFactory = <span class="type">ActorSystem</span>(<span class="string">&quot;actoryFactory&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 创建一个 Actor 的同时，返回 Actor 的 ActorRef</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> sayHelloActorRef: <span class="type">ActorRef</span> = actoryFactory.actorOf(<span class="type">Props</span>[<span class="type">SayHelloActor</span>], <span class="string">&quot;sayHelloActor&quot;</span>)</span><br><span class="line">  <span class="comment">// (1) Props[SayHelloActor] 创建了一个 SayHelloActor 实例，这里使用到了反射</span></span><br><span class="line">  <span class="comment">// (2) &quot;sayHelloActor&quot; 是 Actor 的名字</span></span><br><span class="line">  <span class="comment">// (3) sayHelloActorRef: ActorRef  =&gt;是 Props[SayHelloActor] 的引用</span></span><br><span class="line">  <span class="comment">// (4) 创建的 SayHelloActor 实例被 ActorSystme 接管</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 给 SayHelloActor 发消息(邮箱)</span></span><br><span class="line">    sayHelloActorRef ! <span class="string">&quot;hello&quot;</span></span><br><span class="line">    sayHelloActorRef ! <span class="string">&quot;ok&quot;</span></span><br><span class="line">    sayHelloActorRef ! <span class="string">&quot;ok~&quot;</span></span><br><span class="line">    <span class="comment">// 研究异步如何退出 ActorSystem</span></span><br><span class="line">    sayHelloActorRef ! <span class="string">&quot;exit&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200924190547363.png#pic_center" alt="在这里插入图片描述"><br>小结：<br>当程序执行 private val sayHelloActorRef: ActorRef = actoryFactory.actorOf(Props[SayHelloActor], “sayHelloActor”) 会完成如下任务：</p><pre><code>1、actorFactory 是 ActorSystem(“actorFactory”) 创建的。2、这里的 Props[SayHelloActor] 会使用反射机制，创建一个 SayHelloActor 对象，如果是 actorFactory.actorOf(Props(new SayHelloActor(其他代理对象的引用)), “sayHelloActor”) 形式，就是使用 new 的方式创建一个 SayHelloActor 对象。注意：Props() 是小括号。3、会创建一个 SayHelloActor 对象的代理对象 sayHelloActorRef，使用 sayHelloActorRef 才能发送消息。4、会在底层创建 Dispather Message，是一个线程池，用于分发消息，消息是发送到对应的 Actor 的 MailBox。5、会在底层创建 SayHelloActor 的 MailBox 对象，该对象是一个队列，可接收 Dispatcher Message 发送的消息。6、MailBox 实现了 Runnable 接口，是一个线程，一直运行并调用 Actor 的 receive 方法，因此当Dispather 发送消息到 MailBox 时，Actor 在r eceive 方法就可以得到信息。7、SayHelloActorRef ! “hello” ，表示把 hello 消息发送到 SayHello Actor 的 Mailbox （通过Dispatcher Message 转发）。</code></pre><p>Actor 之间通讯：<br><img src="https://img-blog.csdnimg.cn/20200924190729535.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200924190747738.png#pic_center" alt="在这里插入图片描述">两个 Actor 的通讯机制原理图<br><img src="https://img-blog.csdnimg.cn/20200924190805995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">代码实现：<br>AActor.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.actors</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorRef</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AActor</span>(<span class="params">bActorRef: <span class="type">ActorRef</span></span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;AActor 出招了，start ok&quot;</span>)</span><br><span class="line">      bActorRef ! <span class="string">&quot;我打&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;我打&quot;</span> =&gt; &#123;</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">      <span class="comment">// 给 BActor 发出消息</span></span><br><span class="line">      <span class="comment">// 这里需要持有 BActor 的引用(BActorRef)才可以</span></span><br><span class="line">      println(<span class="string">s&quot;AActor(黄飞鸿) 厉害！看我佛山无影脚 第<span class="subst">$&#123;count&#125;</span>脚&quot;</span>)</span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">1000</span>)</span><br><span class="line">      bActorRef ! <span class="string">&quot;我打&quot;</span> <span class="comment">// 给 BActor 发出消息</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BActor.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.actors</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.<span class="type">Actor</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;我打&quot;</span> =&gt; &#123;</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">      println(<span class="string">s&quot;BActor(乔峰) 挺猛 看我降龙十八掌 第<span class="subst">$&#123;count&#125;</span>掌&quot;</span>)</span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">1000</span>)</span><br><span class="line">      <span class="comment">// 通过 sender() 方法，可以获取到发送消息的 Actor 的 ActorRef</span></span><br><span class="line">      sender() ! <span class="string">&quot;我打&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ActorApp.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.actors</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">ActorRef</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100招后，就退出</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ActorApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建 ActorSystem</span></span><br><span class="line">  <span class="keyword">val</span> actorfactory = <span class="type">ActorSystem</span>(<span class="string">&quot;actorfactory&quot;</span>)</span><br><span class="line">  <span class="comment">// 先创建 BActor 的引用/代理</span></span><br><span class="line">  <span class="keyword">val</span> bActorRef: <span class="type">ActorRef</span> = actorfactory.actorOf(<span class="type">Props</span>[<span class="type">BActor</span>], <span class="string">&quot;bActor&quot;</span>)</span><br><span class="line">  <span class="comment">// 创建 AActor 的引用时需要持有 BActor 的引用</span></span><br><span class="line">  <span class="keyword">val</span> aActorRef: <span class="type">ActorRef</span> = actorfactory.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">AActor</span>(bActorRef)), <span class="string">&quot;aActor&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// aActor 先出招</span></span><br><span class="line">  aActorRef ! <span class="string">&quot;start&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码的小结:</p><pre><code>1、两个 Actor 通讯机制和 Actor 自身发消息机制基本一样，只是要注意如下：2、如果 A Actor 在需要给 B Actor 发消息，则需要持有 B Actor 的 ActorRef，可以通过创建 A Actor 时，传入 B Actor 的代理对象(ActorRef)。3、当 B Actor 在 receive 方法中接收到消息，需要回复时，可以通过 sender() 获取到发送 Actor 的代理对象。</code></pre><p>如何理解 Actor 的 receive 方法被调用？</p><pre><code>1、每个 Actor 对应 MailBox。2、MailBox 实现了 Runnable 接口，处于运行的状态。3、当有消息到达 MailBox，就会去调用 Actor 的 receive 方法，即将消息推送给 receive 方法。</code></pre><h3 id="二、Akka-网络编程："><a href="#二、Akka-网络编程：" class="headerlink" title="二、Akka 网络编程："></a>二、Akka 网络编程：</h3><p>Akka 网络编程基本介绍：</p><p><img src="https://img-blog.csdnimg.cn/20200924191339778.png#pic_center" alt="在这里插入图片描述"></p><h4 id="2-1、Akka-网络编程-小黄鸡客服案例"><a href="#2-1、Akka-网络编程-小黄鸡客服案例" class="headerlink" title="2.1、Akka 网络编程-小黄鸡客服案例"></a>2.1、Akka 网络编程-小黄鸡客服案例</h4><p>需求分析<br>  1、服务端进行监听(9999)<br>  2、客户端可以通过键盘输入，发送咨询问题给小黄鸡客服(服务端)<br>  3、小黄鸡(服务端)回答客户的问题<br><img src="https://img-blog.csdnimg.cn/20200924191452156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>示例代码如下：<br>YellowChickenServer.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.yellowchicken.server</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorRef</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.akka.yellowchicken.common.&#123;<span class="type">ClientMessage</span>, <span class="type">ServerMessage</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.<span class="type">ConfigFactory</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowChickenServer</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; println(<span class="string">&quot;start 小黄鸡客服开始工作了...&quot;</span>)</span><br><span class="line">    <span class="comment">// 如果接收到了服务端的发来的消息，即 ClientMessage</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">ClientMessage</span>(mes) =&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;客户咨询的问题是：&quot;</span> + mes)</span><br><span class="line">      mes <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 match case 匹配（模糊匹配）</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;价格&quot;</span> =&gt; sender() ! <span class="type">ServerMessage</span>(<span class="string">&quot;20000 RMB&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;地址&quot;</span> =&gt; sender() ! <span class="type">ServerMessage</span>(<span class="string">&quot;北京市&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;技术&quot;</span> =&gt; sender() ! <span class="type">ServerMessage</span>(<span class="string">&quot;大数据&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; sender() ! <span class="type">ServerMessage</span>(<span class="string">&quot;你说的啥子:)&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序入口</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">YellowChickenServerApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> host = <span class="string">&quot;127.0.0.1&quot;</span> <span class="comment">// 服务端ip地址</span></span><br><span class="line">  <span class="keyword">val</span> port = <span class="number">9999</span> <span class="comment">// 端口</span></span><br><span class="line">  <span class="comment">// 创建 config 对象，指定协议类型、监听的ip和端口</span></span><br><span class="line">  <span class="keyword">val</span> config = <span class="type">ConfigFactory</span>.parseString(</span><br><span class="line">    <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       |akka.actor.provider=&quot;</span>akka.remote.<span class="type">RemoteActorRefProvider</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       |akka.remote.netty.tcp.hostname=$host</span></span><br><span class="line"><span class="string">       |akka.remote.netty.tcp.port=$port</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">  <span class="comment">// 创建 ActorSystem</span></span><br><span class="line">  <span class="keyword">val</span> serverActorSystem = <span class="type">ActorSystem</span>(<span class="string">&quot;Server&quot;</span>, config)</span><br><span class="line">  <span class="comment">// 创建 YellowChickenServer 的 Actor 和 ActorRef</span></span><br><span class="line">  <span class="keyword">val</span> yellowChickenServerActorRef: <span class="type">ActorRef</span> = serverActorSystem.actorOf(<span class="type">Props</span>[<span class="type">YellowChickenServer</span>], <span class="string">&quot;YellowChickenServer-01&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动服务端</span></span><br><span class="line">  yellowChickenServerActorRef ! <span class="string">&quot;start&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CustomerActor.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.yellowchicken.client</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorRef</span>, <span class="type">ActorSelection</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.test.akka.yellowchicken.common.&#123;<span class="type">ClientMessage</span>, <span class="type">ServerMessage</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.<span class="type">ConfigFactory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">StdIn</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerActor</span>(<span class="params">serverHost: <span class="type">String</span>, serverPort: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个 YellowChickenServerRef</span></span><br><span class="line">  <span class="keyword">var</span> serverActorRef: <span class="type">ActorSelection</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 Actor 中有一个方法 preStart 方法，它会在 Actor 运行前执行</span></span><br><span class="line">  <span class="comment">// 在 Akka 开发中，通常将初始化的工作，放在 preStart 方法中</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">preStart</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">this</span>.serverActorRef = context.actorSelection(<span class="string">s&quot;akka.tcp://Server@<span class="subst">$&#123;serverHost&#125;</span>:<span class="subst">$&#123;serverPort&#125;</span>/user/YellowChickenServer-01&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;this.serverActorRefer=&quot;</span> + <span class="keyword">this</span>.serverActorRef)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; println(<span class="string">&quot;start 客户端运行，可以咨询问题&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> mes: <span class="type">String</span> =&gt; &#123;</span><br><span class="line">      <span class="comment">// 发给服务端</span></span><br><span class="line">      <span class="comment">// serverActorRef ! mes // 不应该发送字符串，应该包装一把，应该发送一个(样例)对象（即协议）</span></span><br><span class="line">      serverActorRef ! <span class="type">ClientMessage</span>(mes) <span class="comment">// 此时发送的是一个对象，该样例类默认实现了序列化 和 apply 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果接受到了服务器端的消息</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">ServerMessage</span>(mes) =&gt; &#123;</span><br><span class="line">      println(<span class="string">s&quot;收到小黄鸡客服(Server)消息：<span class="subst">$mes</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序入口</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CustomerActorApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> (host, port, serverHost, serverPort) = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9990</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">  <span class="keyword">val</span> config = <span class="type">ConfigFactory</span>.parseString(</span><br><span class="line">    <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       |akka.actor.provider=&quot;</span>akka.remote.<span class="type">RemoteActorRefProvider</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       |akka.remote.netty.tcp.hostname=$host</span></span><br><span class="line"><span class="string">       |akka.remote.netty.tcp.port=$port</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 ActorSystem</span></span><br><span class="line">  <span class="keyword">val</span> clientActorSystem = <span class="type">ActorSystem</span>(<span class="string">&quot;Client&quot;</span>, config)</span><br><span class="line">  <span class="comment">// 创建 CustomerActor 的 Actor 和 ActorRef</span></span><br><span class="line">  <span class="keyword">val</span> clientActorRef: <span class="type">ActorRef</span> = clientActorSystem.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">CustomerActor</span>(serverHost, serverPort)), <span class="string">&quot;CustomerActor-01&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动客户端</span></span><br><span class="line">  clientActorRef ! <span class="string">&quot;start&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 客户端发送消息</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> mes = <span class="type">StdIn</span>.readLine()</span><br><span class="line">    clientActorRef ! mes</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MessageProtocol.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.yellowchicken.common</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用样例类来构建协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、客户端发送服务端的协议（序列化对象）</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMessage</span>(<span class="params">mes: <span class="type">String</span></span>)  <span class="comment">// 回顾：样例类的构造器中的每一个参数都默认为 val ，即只可读。</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// 2、服务器端发送给客户端的协议</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">ServerMessage</span>(<span class="params">mes: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><h4 id="2-2、Akka-网络编程-Spark-Master-Worker-进程通讯项目"><a href="#2-2、Akka-网络编程-Spark-Master-Worker-进程通讯项目" class="headerlink" title="2.2、Akka 网络编程-Spark Master Worker 进程通讯项目"></a>2.2、Akka 网络编程-Spark Master Worker 进程通讯项目</h4><p>项目意义:<br>      1、深入理解 Spark 的 Master 和 Worker 的通讯机制。<br>  2、为了方便同学们看 Spark 的底层源码，命名的方式和源码保持一致(如：通讯消息类命名就是一样的)。<br>  3、加深对主从服务心跳检测机制(HeartBeat)的理解，方便以后 spark 源码二次开发。<br>  <br>项目需求分析:<br> <img src="https://img-blog.csdnimg.cn/20200924191753482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="2-2-1、实现功能-1-Worker-完成注册"><a href="#2-2-1、实现功能-1-Worker-完成注册" class="headerlink" title="2.2.1、实现功能 1-Worker 完成注册"></a>2.2.1、实现功能 1-Worker 完成注册</h5><p>功能要求: Worker 注册到 Master，Master 完成注册，并回复 Worker 注册成功。<br><img src="https://img-blog.csdnimg.cn/20200924191851779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>示例代码如下：<br>MasterActor.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.sparkmasterworker.master</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.test.akka.sparkmasterworker.common.&#123;<span class="type">RegisterWorkerInfo</span>, <span class="type">RegisteredWorkerInfo</span>, <span class="type">WorkerInfo</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.<span class="type">ConfigFactory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MasterActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个 mutable.HashMap 属性，用于管理 Worker</span></span><br><span class="line">  <span class="keyword">val</span> workers = mutable.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">WorkerInfo</span>]()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; println(<span class="string">&quot;Master服务器启动了...&quot;</span>)</span><br><span class="line">    <span class="comment">// 接收到 Worker 客户端注册的信息，保存进 HashMap</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">RegisterWorkerInfo</span>(id, cpu, ram) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!workers.contains(id)) &#123;</span><br><span class="line">        <span class="comment">// 创建 WorkerInfo</span></span><br><span class="line">        <span class="keyword">val</span> workerInfo = <span class="keyword">new</span> <span class="type">WorkerInfo</span>(id, cpu, ram)</span><br><span class="line">        <span class="comment">// 加入到 HashMap</span></span><br><span class="line">        workers += (id -&gt; workerInfo)</span><br><span class="line">        println(<span class="string">&quot;服务器的Workers= &quot;</span> + workers)</span><br><span class="line">        <span class="comment">// 回复客户端注册成功</span></span><br><span class="line">        sender() ! <span class="type">RegisteredWorkerInfo</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MasterActorApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> host = <span class="string">&quot;127.0.0.1&quot;</span> <span class="comment">// 服务端ip地址</span></span><br><span class="line">    <span class="keyword">val</span> port = <span class="number">10005</span> <span class="comment">// 端口</span></span><br><span class="line">    <span class="comment">// 创建 config 对象，指定协议类型、监听的ip和端口</span></span><br><span class="line">    <span class="keyword">val</span> config = <span class="type">ConfigFactory</span>.parseString(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |akka.actor.provider=&quot;</span>akka.remote.<span class="type">RemoteActorRefProvider</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |akka.remote.netty.tcp.hostname=$host</span></span><br><span class="line"><span class="string">         |akka.remote.netty.tcp.port=$port</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    <span class="comment">// 先创建 ActorSystem</span></span><br><span class="line">    <span class="keyword">val</span> masterActorSystem = <span class="type">ActorSystem</span>(<span class="string">&quot;Master&quot;</span>, config)</span><br><span class="line">    <span class="comment">// 再创建 Master 的 Actor 和 ActorRef</span></span><br><span class="line">    <span class="keyword">val</span> masterActorRef = masterActorSystem.actorOf(<span class="type">Props</span>[<span class="type">MasterActor</span>], <span class="string">&quot;MasterActor-01&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 Master</span></span><br><span class="line">    masterActorRef ! <span class="string">&quot;start&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WorkerActor.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.sparkmasterworker.worker</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorRef</span>, <span class="type">ActorSelection</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.akka.sparkmasterworker.common.&#123;<span class="type">RegisterWorkerInfo</span>, <span class="type">RegisteredWorkerInfo</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.<span class="type">ConfigFactory</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerActor</span>(<span class="params">serverHost: <span class="type">String</span>, serverPort: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个 MasterActorRef</span></span><br><span class="line">  <span class="keyword">var</span> masterActorProxy: <span class="type">ActorSelection</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义 Worker 的编号</span></span><br><span class="line">  <span class="keyword">var</span> id = java.util.<span class="type">UUID</span>.randomUUID().toString</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 Actor 中有一个方法 preStart 方法，它会在 Actor 运行前执行</span></span><br><span class="line">  <span class="comment">// 在 Akka 开发中，通常将初始化的工作，放在 preStart 方法中</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">preStart</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">this</span>.masterActorProxy = context.actorSelection(<span class="string">s&quot;akka.tcp://Master@<span class="subst">$&#123;serverHost&#125;</span>:<span class="subst">$&#123;serverPort&#125;</span>/user/MasterActor-01&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;this.masterActorProxy=&quot;</span> + <span class="keyword">this</span>.masterActorProxy)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span> </span>= &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;Worker客户端启动运行&quot;</span>)</span><br><span class="line">      <span class="comment">// 给服务器发送一个注册信息</span></span><br><span class="line">      masterActorProxy ! <span class="type">RegisterWorkerInfo</span>(id, <span class="number">16</span>, <span class="number">16</span> * <span class="number">1024</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">RegisteredWorkerInfo</span> =&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;WorkedId= &quot;</span> + id + <span class="string">&quot; 注册成功！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WorkerActorApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> (host, port, serverHost, serverPort) = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10001</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10005</span>)</span><br><span class="line">    <span class="keyword">val</span> config = <span class="type">ConfigFactory</span>.parseString(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |akka.actor.provider=&quot;</span>akka.remote.<span class="type">RemoteActorRefProvider</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |akka.remote.netty.tcp.hostname=$host</span></span><br><span class="line"><span class="string">         |akka.remote.netty.tcp.port=$port</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 ActorSystem</span></span><br><span class="line">    <span class="keyword">val</span> workerActorSystem = <span class="type">ActorSystem</span>(<span class="string">&quot;Worker&quot;</span>, config)</span><br><span class="line">    <span class="comment">// 创建 WorkerActor 的 Actor 和 ActorRef</span></span><br><span class="line">    <span class="keyword">val</span> workerActorRef: <span class="type">ActorRef</span> = workerActorSystem.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">WorkerActor</span>(serverHost, serverPort)), <span class="string">&quot;WorkerActor-01&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动客户端</span></span><br><span class="line">    workerActorRef ! <span class="string">&quot;start&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MessageProtocol.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.sparkmasterworker.common</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用样例类来构建协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker 注册信息</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterWorkerInfo</span>(<span class="params">id: <span class="type">String</span>, cpu: <span class="type">Int</span>, ram: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// 这个是 WorkerInfo，是保存在 Master 的 HashMap 中的，该 HashMap 用于管理 Worker</span></span></span><br><span class="line"><span class="class"><span class="comment">// 将来这个 WorkerInfo 会扩展，比如 增加 Worker 上一次的心跳时间</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">WorkerInfo</span>(<span class="params">val id: <span class="type">String</span>, val cpu: <span class="type">Int</span>, val ram: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// 当 Worker 注册成功，服务器返回一个 RegisteredWorkerInfo 对象</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">RegisteredWorkerInfo</span></span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><h5 id="2-2-2、实现功能-2-Worker-定时发送心跳"><a href="#2-2-2、实现功能-2-Worker-定时发送心跳" class="headerlink" title="2.2.2、实现功能 2-Worker 定时发送心跳"></a>2.2.2、实现功能 2-Worker 定时发送心跳</h5><p>功能要求：Worker 定时发送心跳给 Master，Master 能够接收到，并更新 Worker 上一次心跳时间。<br><img src="https://img-blog.csdnimg.cn/20200924191958665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>示例代码如下：<br>MessageProtocol.scala 中增加代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.sparkmasterworker.common</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用样例类来构建协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker 注册信息</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterWorkerInfo</span>(<span class="params">id: <span class="type">String</span>, cpu: <span class="type">Int</span>, ram: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// 这个是 WorkerInfo，是保存在 Master 的 HashMap 中的，该 HashMap 用于管理 Worker</span></span></span><br><span class="line"><span class="class"><span class="comment">// 将来这个 WorkerInfo 会扩展，比如 增加 Worker 上一次的心跳时间</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">WorkerInfo</span>(<span class="params">val id: <span class="type">String</span>, val cpu: <span class="type">Int</span>, val ram: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 新增属性：心跳时间</span></span><br><span class="line">  <span class="keyword">var</span> lastHeartBeatTime: <span class="type">Long</span> = _</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 Worker 注册成功，服务器返回一个 RegisteredWorkerInfo 对象</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">RegisteredWorkerInfo</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// 每隔一定时间定时器发送给 Master 一个心跳</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">HeartBeat</span>(<span class="params">id: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// Worker 每隔一定时间定时器发送给 自己 一个消息</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">SendHeartBeat</span></span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>MasterActor.scala 中增加代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="type">HeartBeat</span>(id) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 更新对应的 Worker 的心跳时间</span></span><br><span class="line">  <span class="comment">// 1、先从 Worker 中取出 WorkerInfo</span></span><br><span class="line">  <span class="keyword">val</span> workerInfo = workers(id)</span><br><span class="line">  workerInfo.lastHeartBeatTime = <span class="type">System</span>.currentTimeMillis()</span><br><span class="line">  println(<span class="string">&quot;Master更新了 &quot;</span> + id + <span class="string">&quot; 的心跳时间 &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WorkerActor.scala 中增加代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 当客户端注册成功后，就定义一个定时器，每隔一定时间，发送 SendHeartBeat 给自己</span></span><br><span class="line">  <span class="keyword">import</span> context.dispatcher</span><br><span class="line">  context.system.scheduler.schedule(<span class="number">0</span> millis, <span class="number">3000</span> millis, self, <span class="type">SendHeartBeat</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">SendHeartBeat</span> =&gt; &#123;</span><br><span class="line">  println(<span class="string">&quot;WorkedId= &quot;</span> + id + <span class="string">&quot; 给Master发送心跳&quot;</span>)</span><br><span class="line">  masterActorProxy ! <span class="type">HeartBeat</span>(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-2-3、实现功能-3-Master-启动定时任务，定时检测注册的-Worker"><a href="#2-2-3、实现功能-3-Master-启动定时任务，定时检测注册的-Worker" class="headerlink" title="2.2.3、实现功能 3-Master 启动定时任务，定时检测注册的 Worker"></a>2.2.3、实现功能 3-Master 启动定时任务，定时检测注册的 Worker</h5><p>功能要求：Master 启动定时任务，定时检测注册的 Worker 有哪些没有更新心跳，已经超时的 Worker，将其从 HashMap 中删除掉。<br><img src="https://img-blog.csdnimg.cn/20200924192110425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>示例代码如下：<br>MessageProtocol.scala 中增加代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Master 给自己发送一个触发检查超时 Worker 的信息</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">StartTimeOutWorker</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// Master 给自己发消息，检测 Worker，对于心跳超时的</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">RemoveTimeOutWorker</span></span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>MasterActor.scala 中增加代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; &#123;</span><br><span class="line">  println(<span class="string">&quot;Master服务器启动了...&quot;</span>)</span><br><span class="line">  <span class="comment">// Master 启动定时任务，定时检测注册的 Worker 有哪些没有更新心跳，已经超时的 Worker，将其从 HashMap 中删除掉。</span></span><br><span class="line">  self ! <span class="type">StartTimeOutWorker</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启定时器，每隔一定时间检测是否有 Worker 的心跳超时</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">StartTimeOutWorker</span> =&gt; &#123;</span><br><span class="line">  println(<span class="string">&quot;开启了定时检测Worker心跳的任务&quot;</span>)</span><br><span class="line">  <span class="keyword">import</span> context.dispatcher <span class="comment">// 使用调度器时候必须导入dispatcher</span></span><br><span class="line">  context.system.scheduler.schedule(<span class="number">0</span> millis, <span class="number">9000</span> millis, self, <span class="type">RemoveTimeOutWorker</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断哪些 Worker 心跳超时（nowTime - lastHeartBeatTime），对已经超时的 Worker，将其从 HashMap 中删除掉。</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">RemoveTimeOutWorker</span> =&gt; &#123;</span><br><span class="line">  <span class="comment">// 首先获取所有 Workers 的所有 WorkerInfo</span></span><br><span class="line">  <span class="keyword">val</span> workerInfos = workers.values</span><br><span class="line">  <span class="keyword">val</span> nowTime = <span class="type">System</span>.currentTimeMillis()</span><br><span class="line">  <span class="comment">// 过滤出所有超时的 workerInfo 并删除即可</span></span><br><span class="line">  workerInfos.filter(workerInfo =&gt; (nowTime - workerInfo.lastHeartBeatTime) &gt; <span class="number">6000</span>)</span><br><span class="line">    .foreach(workerInfo =&gt; workers.remove(workerInfo.id))</span><br><span class="line">  println(<span class="string">&quot;当前有 &quot;</span> + workers.size + <span class="string">&quot; 个Worker存活&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-2-4、实现功能-4-Master-Worker-的启动参数运行时指定"><a href="#2-2-4、实现功能-4-Master-Worker-的启动参数运行时指定" class="headerlink" title="2.2.4、实现功能 4-Master,Worker 的启动参数运行时指定"></a>2.2.4、实现功能 4-Master,Worker 的启动参数运行时指定</h5><p>功能要求：Master，Worker 的启动参数运行时指定，而不是固定写在程序中的。</p><p>MasterActor.scala 中修改代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (args.length != <span class="number">3</span>) &#123;</span><br><span class="line">  println(<span class="string">&quot;请输入参数 host port MasterActor的名字&quot;</span>)</span><br><span class="line">  sys.exit()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> host = args(<span class="number">0</span>)  <span class="comment">// 服务端ip地址</span></span><br><span class="line"><span class="keyword">val</span> port = args(<span class="number">1</span>)  <span class="comment">// 端口</span></span><br><span class="line"><span class="keyword">val</span> masterName = args(<span class="number">2</span>)  <span class="comment">// MasterActor的名字</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">// 再创建 Master 的 Actor 和 ActorRef</span></span><br><span class="line"><span class="keyword">val</span> masterActorRef = masterActorSystem.actorOf(<span class="type">Props</span>[<span class="type">MasterActor</span>], <span class="string">s&quot;<span class="subst">$&#123;masterName&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WorkerActor.scala 中增修改代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (args != <span class="number">6</span>) &#123;</span><br><span class="line">  println(<span class="string">&quot;请输入参数 host port WorkerActor的名字 serverHost serverPort MasterActor的名字&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> host = args(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">val</span> port = args(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> workerName = args(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> serverHost = args(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> serverPort = args(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> masterName = args(<span class="number">5</span>)</span><br><span class="line">......</span><br><span class="line"><span class="comment">// 创建 WorkerActor 的 Actor 和 ActorRef</span></span><br><span class="line"><span class="keyword">val</span> workerActorRef: <span class="type">ActorRef</span> = workerActorSystem.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">WorkerActor</span>(serverHost, serverPort.toInt, masterName)), <span class="string">s&quot;<span class="subst">$&#123;workerName&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java后端 </tag>
            
            <tag> Scala编程 </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canal数据同步工具</title>
      <link href="2021/04/24/Canal%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7/"/>
      <url>2021/04/24/Canal%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="一、Canal介绍"><a href="#一、Canal介绍" class="headerlink" title="一、Canal介绍"></a>一、Canal介绍</h4><p><strong>1、应用场景</strong><br>在前面的统计分析功能中，我们采取了服务调用获取统计数据，这样耦合度高，效率相对较低，目前我采取另一种实现方式，通过实时同步数据库表的方式实现，例如我们要统计每天注册与登录人数，我们只需把会员表同步到统计库中，实现本地统计就可以了，这样效率更高，耦合度更低，Canal就是一个很好的数据库同步工具。canal是阿里巴巴旗下的一款开源项目，纯Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费，目前主要支持了MySQL。</p><p><strong>2、Canal环境搭建</strong></p><p>canal的原理是基于mysql binlog技术，所以这里一定需要开启mysql的binlog写入功能<br>开启mysql服务：  service mysql start<br>（1）检查binlog功能是否有开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&#x27;log_bin&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | OFF    |</span><br><span class="line">+---------------+-------+</span><br><span class="line"><span class="number">1</span> <span class="function">row in <span class="title">set</span> <span class="params">(<span class="number">0.00</span> sec)</span></span></span><br></pre></td></tr></table></figure><p>（2）如果显示状态为OFF表示该功能未开启，开启binlog功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>，修改 mysql 的配置文件 my.cnf</span><br><span class="line">vi /etc/my.cnf </span><br><span class="line">追加内容：</span><br><span class="line">log-bin=mysql-bin     #binlog文件名</span><br><span class="line">binlog_format=ROW     #选择row模式</span><br><span class="line">server_id=1           #mysql实例id,不能和canal的slaveId重复</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，重启 mysql：</span><br><span class="line">service mysql restart</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>，登录 mysql 客户端，查看 log_bin 变量</span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;log_bin&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | ON|</span><br><span class="line">+---------------+-------+</span><br><span class="line"><span class="number">1</span> <span class="function">row in <span class="title">set</span> <span class="params">(<span class="number">0.00</span> sec)</span></span></span><br><span class="line"><span class="function">————————————————</span></span><br><span class="line"><span class="function">如果显示状态为ON表示该功能已开启</span></span><br></pre></td></tr></table></figure><p>（3）在mysql里面添加以下的相关用户和权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;canal&#x27;</span>;</span><br><span class="line">GRANT SHOW VIEW, SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p><strong>3、下载安装Canal服务</strong><br>下载地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//github.com/alibaba/canal/releases</span></span><br></pre></td></tr></table></figure><p>（1）下载之后，放到目录中，解压文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/canal</span><br><span class="line"></span><br><span class="line">canal.deployer-<span class="number">1.1</span><span class="number">.4</span>.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf canal.deployer-<span class="number">1.1</span><span class="number">.4</span>.tar.gz</span><br></pre></td></tr></table></figure><p>（2）修改配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi conf/example/instance.properties</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#需要改成自己的数据库信息</span><br><span class="line">canal.instance.master.address=<span class="number">192.168</span><span class="number">.44</span><span class="number">.132</span>:<span class="number">3306</span></span><br><span class="line"></span><br><span class="line">#需要改成自己的数据库用户名与密码</span><br><span class="line"></span><br><span class="line">canal.instance.dbUsername=canal</span><br><span class="line">canal.instance.dbPassword=canal</span><br><span class="line"></span><br><span class="line">#需要改成同步的数据库表规则，例如只是同步一下表</span><br><span class="line">#canal.instance.filter.regex=.*\\..*</span><br><span class="line">canal.instance.filter.regex=guli_ucenter.ucenter_member</span><br></pre></td></tr></table></figure><p>注：</p><p>*mysql 数据解析关注的表，Perl正则表达式.多个正则之间以逗号(,)分隔，转义符需要双斜杠(\) 常见例子：</p><ol><li> 所有表：.*   or  .<em>\..</em>      </li><li> canal schema下所有表： canal\..*</li><li> canal下的以canal打头的表：canal\.canal.*</li><li> canal schema下的一张表：canal.test1</li><li> 多个规则组合使用：canal\..<em>,mysql.test1,mysql.test2 (逗号分隔)<br>注意：此过滤条件只针对row模式的数据有效(ps. mixed/statement因为不解析sql，所以无法准确提取tableName进行过滤)</em></li></ol><p>（3）进入bin目录下启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/startup.sh</span><br></pre></td></tr></table></figure><h4 id="二、创建canal-client模块"><a href="#二、创建canal-client模块" class="headerlink" title="二、创建canal_client模块"></a>二、创建canal_client模块</h4><p><strong>1、在parent下创建canal_client模块</strong><br><img src="https://img-blog.csdnimg.cn/20200622205759866.png" alt="在这里插入图片描述"><strong>2、引入相关依赖</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--mysql--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-dbutils&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-dbutils&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.otter&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;canal.client&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>3、创建application.properties配置文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 服务端口</span><br><span class="line">server.port=<span class="number">10000</span></span><br><span class="line"># 服务名</span><br><span class="line">spring.application.name=canal-client</span><br><span class="line"></span><br><span class="line"># 环境设置：dev、test、prod</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line"></span><br><span class="line"># mysql数据库连接</span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br></pre></td></tr></table></figure><p><strong>4、编写canal客户端类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnector;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnectors;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.Message;</span><br><span class="line"><span class="keyword">import</span> com.google.protobuf.InvalidProtocolBufferException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.DbUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanalClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sql队列</span></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;String&gt; SQL_QUEUE = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * canal入库方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CanalConnector connector = CanalConnectors.newSingleConnector(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;192.168.44.132&quot;</span>,</span><br><span class="line">                <span class="number">11111</span>), <span class="string">&quot;example&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> batchSize = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connector.connect();</span><br><span class="line">            connector.subscribe(<span class="string">&quot;.*\\..*&quot;</span>);</span><br><span class="line">            connector.rollback();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="comment">//尝试从master那边拉去数据batchSize条记录，有多少取多少</span></span><br><span class="line">                    Message message = connector.getWithoutAck(batchSize);</span><br><span class="line">                    <span class="keyword">long</span> batchId = message.getId();</span><br><span class="line">                    <span class="keyword">int</span> size = message.getEntries().size();</span><br><span class="line">                    <span class="keyword">if</span> (batchId == -<span class="number">1</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dataHandle(message.getEntries());</span><br><span class="line">                    &#125;</span><br><span class="line">                    connector.ack(batchId);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//当队列里面堆积的sql大于一定数值的时候就模拟执行</span></span><br><span class="line">                    <span class="keyword">if</span> (SQL_QUEUE.size() &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                        executeQueueSql();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connector.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟执行队列里面的sql语句</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeQueueSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = SQL_QUEUE.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            String sql = SQL_QUEUE.poll();</span><br><span class="line">            System.out.println(<span class="string">&quot;[sql]----&gt; &quot;</span> + sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.execute(sql.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entrys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dataHandle</span><span class="params">(List&lt;Entry&gt; entrys)</span> <span class="keyword">throws</span> InvalidProtocolBufferException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry entry : entrys) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EntryType.ROWDATA == entry.getEntryType()) &#123;</span><br><span class="line">                RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">                EventType eventType = rowChange.getEventType();</span><br><span class="line">                <span class="keyword">if</span> (eventType == EventType.DELETE) &#123;</span><br><span class="line">                    saveDeleteSql(entry);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType == EventType.UPDATE) &#123;</span><br><span class="line">                    saveUpdateSql(entry);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType == EventType.INSERT) &#123;</span><br><span class="line">                    saveInsertSql(entry);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存更新语句</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveUpdateSql</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            List&lt;RowData&gt; rowDatasList = rowChange.getRowDatasList();</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowDatasList) &#123;</span><br><span class="line">                List&lt;Column&gt; newColumnList = rowData.getAfterColumnsList();</span><br><span class="line">                StringBuffer sql = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;update &quot;</span> + entry.getHeader().getTableName() + <span class="string">&quot; set &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newColumnList.size(); i++) &#123;</span><br><span class="line">                    sql.append(<span class="string">&quot; &quot;</span> + newColumnList.get(i).getName()</span><br><span class="line">                            + <span class="string">&quot; = &#x27;&quot;</span> + newColumnList.get(i).getValue() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i != newColumnList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                        sql.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sql.append(<span class="string">&quot; where &quot;</span>);</span><br><span class="line">                List&lt;Column&gt; oldColumnList = rowData.getBeforeColumnsList();</span><br><span class="line">                <span class="keyword">for</span> (Column column : oldColumnList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (column.getIsKey()) &#123;</span><br><span class="line">                        <span class="comment">//暂时只支持单一主键</span></span><br><span class="line">                        sql.append(column.getName() + <span class="string">&quot;=&quot;</span> + column.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                SQL_QUEUE.add(sql.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存删除语句</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveDeleteSql</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            List&lt;RowData&gt; rowDatasList = rowChange.getRowDatasList();</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowDatasList) &#123;</span><br><span class="line">                List&lt;Column&gt; columnList = rowData.getBeforeColumnsList();</span><br><span class="line">                StringBuffer sql = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;delete from &quot;</span> + entry.getHeader().getTableName() + <span class="string">&quot; where &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Column column : columnList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (column.getIsKey()) &#123;</span><br><span class="line">                        <span class="comment">//暂时只支持单一主键</span></span><br><span class="line">                        sql.append(column.getName() + <span class="string">&quot;=&quot;</span> + column.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                SQL_QUEUE.add(sql.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存插入语句</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveInsertSql</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            List&lt;RowData&gt; rowDatasList = rowChange.getRowDatasList();</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowDatasList) &#123;</span><br><span class="line">                List&lt;Column&gt; columnList = rowData.getAfterColumnsList();</span><br><span class="line">                StringBuffer sql = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;insert into &quot;</span> + entry.getHeader().getTableName() + <span class="string">&quot; (&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnList.size(); i++) &#123;</span><br><span class="line">                    sql.append(columnList.get(i).getName());</span><br><span class="line">                    <span class="keyword">if</span> (i != columnList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                        sql.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sql.append(<span class="string">&quot;) VALUES (&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnList.size(); i++) &#123;</span><br><span class="line">                    sql.append(<span class="string">&quot;&#x27;&quot;</span> + columnList.get(i).getValue() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i != columnList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                        sql.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sql.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                SQL_QUEUE.add(sql.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> == sql) <span class="keyword">return</span>;</span><br><span class="line">            con = dataSource.getConnection();</span><br><span class="line">            QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            <span class="keyword">int</span> row = qr.execute(con, sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;update: &quot;</span>+ row);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.closeQuietly(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、创建启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanalApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CanalClient canalClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CanalApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//项目启动，执行canal客户端监听</span></span><br><span class="line">        canalClient.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java后端 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/24/hello-world/"/>
      <url>2021/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
