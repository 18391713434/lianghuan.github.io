<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LianghuanのBlog</title>
  
  <subtitle>If u shed tears when u miss the sun,you also miss the stars!</subtitle>
  <link href="https://www.lianghuan.zone/atom.xml" rel="self"/>
  
  <link href="https://www.lianghuan.zone/"/>
  <updated>2022-04-28T15:29:22.461Z</updated>
  <id>https://www.lianghuan.zone/</id>
  
  <author>
    <name>Liang Huan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux0.11系统调用实现</title>
    <link href="https://www.lianghuan.zone/2022/04/22/Linux0.11%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.lianghuan.zone/2022/04/22/Linux0.11%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-04-22T12:38:49.000Z</published>
    <updated>2022-04-28T15:29:22.461Z</updated>
    
    <content type="html"><![CDATA[<p>此次实验的基本内容是：在 Linux 0.11 上添加两个系统调用，并编写两个简单的应用程序测试它们。</p><p>（1）iam()<br>第一个系统调用是 iam()，其原型为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">iam</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * name)</span></span>;</span><br></pre></td></tr></table></figure><p>完成的功能是将字符串参数 name 的内容拷贝到内核中保存下来。要求 name 的长度不能超过 23 个字符。返回值是拷贝的字符数。如果 name 的字符个数超过了 23，则返回 “-1”，并置 errno 为 EINVAL。</p><p>在 kernal/who.c 中实现此系统调用。</p><p>（2）whoami()<br>第二个系统调用是 whoami()，其原型为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">whoami</span><span class="params">(<span class="keyword">char</span>* name, unsigned <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure><p>它将内核中由 iam() 保存的名字拷贝到 name 指向的用户地址空间中，同时确保不会对 name 越界访存（name 的大小由 size 说明）。返回值是拷贝的字符数。如果 size 小于需要的空间，则返回“-1”，并置 errno 为 EINVAL。</p><p>也是在 kernal/who.c 中实现。<br>首先，请将 Linux 0.11 的源代码恢复到原始状态。</p><h3 id="一、实验环境准备"><a href="#一、实验环境准备" class="headerlink" title="一、实验环境准备"></a>一、实验环境准备</h3><h4 id="1-1、删除原来的文件"><a href="#1-1、删除原来的文件" class="headerlink" title="1.1、删除原来的文件"></a>1.1、删除原来的文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;oslab</span><br><span class="line">$ sudo rm -rf .&#x2F;*</span><br></pre></td></tr></table></figure><h4 id="1-2、-重新拷贝"><a href="#1-2、-重新拷贝" class="headerlink" title="1.2、 重新拷贝"></a>1.2、 重新拷贝</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -r &#x2F;home&#x2F;teacher&#x2F;oslab&#x2F;* .&#x2F;</span><br></pre></td></tr></table></figure><p>操作系统实现系统调用的基本过程（在 MOOC 课程中已经给出了详细的讲解）是：</p><ul><li>应用程序调用库函数（API）；</li><li>API 将系统调用号存入 EAX，然后通过中断调用使系统进入内核态；</li><li>内核中的中断处理函数根据系统调用号，调用对应的内核函数（系统调用）；</li><li>系统调用完成相应功能，将返回值存入 EAX，返回到中断处理函数；</li><li>中断处理函数返回到 API 中；</li><li>API 将 EAX 返回给应用程序。</li></ul><h3 id="二、-应用程序如何调用系统调用"><a href="#二、-应用程序如何调用系统调用" class="headerlink" title="二、 应用程序如何调用系统调用"></a>二、 应用程序如何调用系统调用</h3><p>在通常情况下，调用系统调用和调用一个普通的自定义函数在代码上并没有什么区别，但调用后发生的事情有很大不同。</p><p>调用自定义函数是通过 call 指令直接跳转到该函数的地址，继续运行。</p><p>而调用系统调用，是调用系统库中为该系统调用编写的一个接口函数，叫 API（Application Programming Interface）。API 并不能完成系统调用的真正功能，它要做的是去调用真正的系统调用，过程是：</p><ul><li>把系统调用的编号存入 EAX；</li><li>把函数参数存入其它通用寄存器；</li><li>触发 0x80 号中断（int 0x80）。<br>linux-0.11 的 lib 目录下有一些已经实现的 API。Linus 编写它们的原因是在内核加载完毕后，会切换到用户模式下，做一些初始化工作，然后启动 shell。而用户模式下的很多工作需要依赖一些系统调用才能完成，因此在内核中实现了这些系统调用的 API。</li></ul><blockquote><p>后面的目录如果没有特殊说明，都是指在 /home/shiyanlou/oslab/linux-0.11 中。比如下面的<br>lib/close.c，是指 /home/shiyanlou/oslab/linux-0.11/lib/close.c。</p></blockquote><p>我们不妨看看 lib/close.c，研究一下 close() 的 API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#define __LIBRARY__</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">_syscall1(<span class="keyword">int</span>, close, <span class="keyword">int</span>, fd)</span><br></pre></td></tr></table></figure><p>其中 _syscall1 是一个宏，在 include/unistd.h 中定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#define _syscall1(type,name,atype,a) \</span><br><span class="line"><span class="function">type <span class="title">name</span><span class="params">(atype a)</span> \</span></span><br><span class="line"><span class="function"></span>&#123; \</span><br><span class="line"><span class="keyword">long</span> __res; \</span><br><span class="line"><span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;int $0x80&quot;</span> \</span></span></span><br><span class="line"><span class="function"><span class="params">    : <span class="string">&quot;=a&quot;</span> (__res)</span> \</span></span><br><span class="line"><span class="function">    : &quot;0&quot; <span class="params">(__NR_##name)</span>,&quot;b&quot; <span class="params">((<span class="keyword">long</span>)</span><span class="params">(a)</span>))</span>; \</span><br><span class="line"><span class="keyword">if</span> (__res &gt;= <span class="number">0</span>) \</span><br><span class="line">    <span class="keyword">return</span> (type) __res; \</span><br><span class="line">errno = -__res; \</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>; \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 _syscall1(int,close,int,fd) 进行宏展开，可以得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> __res;</span><br><span class="line">    <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;int $0x80&quot;</span></span></span></span><br><span class="line"><span class="function"><span class="params">        : <span class="string">&quot;=a&quot;</span> (__res)</span></span></span><br><span class="line"><span class="function">        : &quot;0&quot; <span class="params">(__NR_close)</span>,&quot;b&quot; <span class="params">((<span class="keyword">long</span>)</span><span class="params">(fd)</span>))</span>;</span><br><span class="line">    <span class="keyword">if</span> (__res &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) __res;</span><br><span class="line">    errno = -__res;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是 API 的定义。它先将宏 __NR_close 存入 EAX，将参数 fd 存入 EBX，然后进行 0x80 中断调用。调用返回后，从 EAX 取出返回值，存入 __res，再通过对 __res 的判断决定传给 API 的调用者什么样的返回值。</p><p>POSIX表示可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 POSIX ），POSIX标准定义了操作系统应该为应用程序提供的接口标准，即应用程序直接访问内核的函数标准。POSIX标准意在期望获得源代码级别的软件可移植性。一个POSIX兼容的操作系统编写的程序，应该可以在任何其它的POSIX操作系统（即使是来自另一个厂商）上编译执行。linux和windows都要实现基本的POSIX标准，linux把fork函数封装成posix_fork，windows把creatprocess函数也封装成posix_fork，都声明在unistd.h里。这样，程序员编写普通应用时候，只用包含unistd.h，调用posix_fork函数，程序就在源代码级别可移植了。</p><p>&lt;unistd.h&gt;头文件是 C 和 C++ 程序设计语言中提供对 POSIX 操作系统 API 的访问功能的头文件。unistd.h 中所定义的接口通常都是大量针对系统调用的封装（英语：wrapper functions），如 fork、pipe 以及各种 I/O 原语（read、write、close 等等）。</p><p>其中 __NR_close 就是系统调用的编号，在 include/unistd.h 中定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define __NR_close    6</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">所以添加系统调用时需要修改include/unistd.h文件，</span></span><br><span class="line"><span class="comment">使其包含__NR_whoami和__NR_iam。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">而在应用程序中，要有：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 有它，_syscall1 等才有效。详见unistd.h */</span></span><br><span class="line">#define __LIBRARY__</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 有它，编译器才能获知自定义的系统调用的编号 */</span></span><br><span class="line">#include &quot;unistd.h&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iam()在用户空间的接口函数 */</span></span><br><span class="line">_syscall1(<span class="keyword">int</span>, iam, <span class="keyword">const</span> <span class="keyword">char</span>*, name);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* whoami()在用户空间的接口函数 */</span></span><br><span class="line">_syscall2(<span class="keyword">int</span>, whoami,<span class="keyword">char</span>*,name,unsigned <span class="keyword">int</span>,size);</span><br></pre></td></tr></table></figure><p>在 0.11 环境下编译 C 程序，包含的头文件都在 /usr/include 目录下。</p><p>该目录下的 unistd.h 是标准头文件（它和 0.11 源码树中的 unistd.h 并不是同一个文件，虽然内容可能相同），没有 __NR_whoami 和 __NR_iam 两个宏，需要手工加上它们，也可以直接从修改过的 0.11 源码树中拷贝新的 unistd.h 过来。</p><h3 id="三、实站环节"><a href="#三、实站环节" class="headerlink" title="三、实站环节"></a>三、实站环节</h3><h4 id="3-1、从“int-0x80”进入内核函数"><a href="#3-1、从“int-0x80”进入内核函数" class="headerlink" title="3.1、从“int 0x80”进入内核函数"></a>3.1、从“int 0x80”进入内核函数</h4><p>int 0x80 触发后，接下来就是内核的中断处理了。先了解一下 0.11 处理 0x80 号中断的过程。</p><p>在内核初始化时，主函数（在 init/main.c 中，Linux 实验环境下是 main()，Windows 下因编译器兼容性问题被换名为 start()）调用了 sched_init() 初始化函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    ……</span></span><br><span class="line">    time_init();</span><br><span class="line">    sched_init();</span><br><span class="line">    buffer_init(buffer_memory_end);</span><br><span class="line"><span class="comment">//    ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sched_init() 在 kernel/sched.c 中定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sched_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    ……</span></span><br><span class="line">    set_system_gate(<span class="number">0x80</span>,&amp;system_call);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set_system_gate 是个宏，在 include/asm/system.h 中定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define set_system_gate(n,addr) \</span><br><span class="line">    _set_gate(&amp;idt[n],<span class="number">15</span>,<span class="number">3</span>,addr)</span><br></pre></td></tr></table></figure><p>_set_gate 的定义是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define _set_gate(gate_addr,type,dpl,addr) \</span><br><span class="line">__asm__ (<span class="string">&quot;movw %%dx,%%ax\n\t&quot;</span> \</span><br><span class="line">    <span class="string">&quot;movw %0,%%dx\n\t&quot;</span> \</span><br><span class="line">    <span class="string">&quot;movl %%eax,%1\n\t&quot;</span> \</span><br><span class="line">    <span class="string">&quot;movl %%edx,%2&quot;</span> \</span><br><span class="line">    : \</span><br><span class="line">    : <span class="string">&quot;i&quot;</span> ((<span class="keyword">short</span>) (<span class="number">0x8000</span>+(dpl&lt;&lt;<span class="number">13</span>)+(type&lt;&lt;<span class="number">8</span>))), \</span><br><span class="line">    <span class="string">&quot;o&quot;</span> (*((<span class="keyword">char</span> *) (gate_addr))), \</span><br><span class="line">    <span class="string">&quot;o&quot;</span> (*(<span class="number">4</span>+(<span class="keyword">char</span> *) (gate_addr))), \</span><br><span class="line">    <span class="string">&quot;d&quot;</span> ((<span class="keyword">char</span> *) (addr)),<span class="string">&quot;a&quot;</span> (<span class="number">0x00080000</span>))</span><br></pre></td></tr></table></figure><p>虽然看起来挺麻烦，但实际上很简单，就是填写 IDT（中断描述符表），将 system_call 函数地址写到 0x80 对应的中断描述符中，也就是在中断 0x80 发生后，自动调用函数 system_call。具体细节请参考《注释》的第 4 章。<br>用户态代码不能直接通过jmp指令跳转到内核态内存区域中，用户态代码也不能用mov指令访问存放在内核态内存中的数据。操作系统在内存中进行区域划分通过特权级来决定当前指令是否有权限访问内存段数据。在指令跳转时会比较CPL和DPL（CPL放置在CS寄存器，DPL存放在段描述符表GDT中的段表项中也称为段描述符），只有特权级检查通过才会进行跳转。<br>上述的内嵌汇编代码是在操作系统初始化过程中设置0x80对应的IDT表项时候将0x80号中断描述符的DPL设置为3。所以在用户态应用程序中用CPL=3，调用int 0x80时需要从GDT表中查询目标段的信息，此处应该为查询IDT表中的信息得到DPL=3，此时CPL也是3，就可以顺利通过特权级检查。跳转到IDT表中对应的中断描述符对应的地址即中断处理程序的地址之后，此时已经进入内核态，此时CPL等于0.<br>LDT是如何寻址的？<br>给出逻辑地址：33h:12345678h转换为线性地址<br>１．段选择子SEL=33h=0000000000100 0 01b<br>前13bit是4,则在GDT中选择第四个描述符；TI=0代表是在GDT中选择，<br>后边的特权级RPL＝１，假设第四个段描述符的基地址为11111111h<br>２.OFFSET=12345678h,则线性地址为：base+offset=11111111h+12345678h=123456789h</p><p>接下来看 system_call。该函数纯汇编打造，定义在 kernel/system_call.s 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">!……</span><br><span class="line">! # 这是系统调用总数。如果增删了系统调用，必须做相应修改</span><br><span class="line">nr_system_calls = <span class="number">72</span></span><br><span class="line">!……</span><br><span class="line"></span><br><span class="line">.globl system_call</span><br><span class="line">.align <span class="number">2</span></span><br><span class="line">system_call:</span><br><span class="line"></span><br><span class="line">! # 检查系统调用编号是否在合法范围内</span><br><span class="line">    cmpl \$nr_system_calls-<span class="number">1</span>,%eax</span><br><span class="line">    ja bad_sys_call</span><br><span class="line">    push %ds</span><br><span class="line">    push %es</span><br><span class="line">    push %fs</span><br><span class="line">    pushl %edx</span><br><span class="line">    pushl %ecx</span><br><span class="line"></span><br><span class="line">! # push %ebx,%ecx,%edx，是传递给系统调用的参数</span><br><span class="line">    pushl %ebx</span><br><span class="line"></span><br><span class="line">! # 让ds, es指向GDT，内核地址空间</span><br><span class="line">    movl $<span class="number">0x10</span>,%edx</span><br><span class="line">    mov %dx,%ds</span><br><span class="line">    mov %dx,%es</span><br><span class="line">    movl $<span class="number">0x17</span>,%edx</span><br><span class="line">! # 让fs指向LDT，用户地址空间</span><br><span class="line">    mov %dx,%fs</span><br><span class="line">    <span class="function">call <span class="title">sys_call_table</span><span class="params">(,%eax,<span class="number">4</span>)</span></span></span><br><span class="line"><span class="function">    pushl %eax</span></span><br><span class="line"><span class="function">    movl current,%eax</span></span><br><span class="line"><span class="function">    cmpl $0,<span class="title">state</span><span class="params">(%eax)</span></span></span><br><span class="line"><span class="function">    jne reschedule</span></span><br><span class="line"><span class="function">    cmpl $0,<span class="title">counter</span><span class="params">(%eax)</span></span></span><br><span class="line"><span class="function">    je reschedule</span></span><br></pre></td></tr></table></figure><p>system_call 用 .globl 修饰为其他函数可见。</p><p>Windows 实验环境下会看到它有一个下划线前缀，这是不同版本编译器的特质决定的，没有实质区别。</p><p>call sys_call_table(,%eax,4) 之前是一些压栈保护，修改段选择子为内核段，call sys_call_table(,%eax,4) 之后是看看是否需要重新调度，这些都与本实验没有直接关系，此处只关心 call sys_call_table(,%eax,4) 这一句。</p><p>根据汇编寻址方法它实际上是：call sys_call_table + 4 * %eax，其中 eax 中放的是系统调用号，即 __NR_xxxxxx。</p><p>显然，sys_call_table 一定是一个函数指针数组的起始地址，它定义在 include/linux/sys.h 中：<br>fn_ptr sys_call_table[] = { sys_setup, sys_exit, sys_fork, sys_read,…</p><p>增加实验要求的系统调用，需要在这个函数表中增加两个函数引用 ——sys_iam 和 sys_whoami。当然该函数在 sys_call_table 数组中的位置必须和 __NR_xxxxxx 的值对应上。</p><p>同时还要仿照此文件中前面各个系统调用的写法，加上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">extern <span class="keyword">int</span> <span class="title">sys_whoami</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">extern <span class="keyword">int</span> <span class="title">sys_iam</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>不然，编译会出错的。</p><h4 id="3-2、-实现-sys-iam-和-sys-whoami"><a href="#3-2、-实现-sys-iam-和-sys-whoami" class="headerlink" title="3.2、 实现 sys_iam() 和 sys_whoami()"></a>3.2、 实现 sys_iam() 和 sys_whoami()</h4><p>添加系统调用的最后一步，是在内核中实现函数 sys_iam() 和 sys_whoami()。</p><p>每个系统调用都有一个 sys_xxxxxx() 与之对应，它们都是我们学习和模仿的好对象。</p><p>比如在 fs/open.c 中的 sys_close(int fd)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_close</span><span class="params">(unsigned <span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    ……</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它没有什么特别的，都是实实在在地做 close() 该做的事情。</p><p>所以只要自己创建一个文件：kernel/who.c，然后实现两个函数就万事大吉了。</p><blockquote><p>如果完全没有实现的思路，不必担心，本实验的 “6.7 在用户态和核心态之间传递数据” 还会有提示。</p></blockquote><h4 id="3-3、修改-Makefile"><a href="#3-3、修改-Makefile" class="headerlink" title="3.3、修改 Makefile"></a>3.3、修改 Makefile</h4><p>要想让我们添加的 kernel/who.c 可以和其它 Linux 代码编译链接到一起，必须要修改 Makefile 文件。</p><p>Makefile 里记录的是所有源程序文件的编译、链接规则，《注释》3.6 节有简略介绍。我们之所以简单地运行 make 就可以编译整个代码树，是因为 make 完全按照 Makefile 里的指示工作。</p><p>如果想要深入学习 Makefile，可以选择实验楼的课程： 《Makefile 基础教程》、《跟我一起来玩转 Makefile》。</p><p>Makefile 在代码树中有很多，分别负责不同模块的编译工作。我们要修改的是 kernel/Makefile。需要修改两处。</p><p>（1）第一处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OBJS  &#x3D; sched.o system_call.o traps.o asm.o fork.o \</span><br><span class="line">        panic.o printk.o vsprintf.o sys.o exit.o \</span><br><span class="line">        signal.o mktime.o</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OBJS  &#x3D; sched.o system_call.o traps.o asm.o fork.o \</span><br><span class="line">        panic.o printk.o vsprintf.o sys.o exit.o \</span><br><span class="line">        signal.o mktime.o who.o</span><br></pre></td></tr></table></figure><p>添加了 who.o。</p><p>（2）第二处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">### Dependencies:</span><br><span class="line">exit.s exit.o: exit.c ..&#x2F;include&#x2F;errno.h ..&#x2F;include&#x2F;signal.h \</span><br><span class="line">  ..&#x2F;include&#x2F;sys&#x2F;types.h ..&#x2F;include&#x2F;sys&#x2F;wait.h ..&#x2F;include&#x2F;linux&#x2F;sched.h \</span><br><span class="line">  ..&#x2F;include&#x2F;linux&#x2F;head.h ..&#x2F;include&#x2F;linux&#x2F;fs.h ..&#x2F;include&#x2F;linux&#x2F;mm.h \</span><br><span class="line">  ..&#x2F;include&#x2F;linux&#x2F;kernel.h ..&#x2F;include&#x2F;linux&#x2F;tty.h ..&#x2F;include&#x2F;termios.h \</span><br><span class="line">  ..&#x2F;include&#x2F;asm&#x2F;segment.h</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">### Dependencies:</span><br><span class="line">who.s who.o: who.c ..&#x2F;include&#x2F;linux&#x2F;kernel.h ..&#x2F;include&#x2F;unistd.h</span><br><span class="line">exit.s exit.o: exit.c ..&#x2F;include&#x2F;errno.h ..&#x2F;include&#x2F;signal.h \</span><br><span class="line">  ..&#x2F;include&#x2F;sys&#x2F;types.h ..&#x2F;include&#x2F;sys&#x2F;wait.h ..&#x2F;include&#x2F;linux&#x2F;sched.h \</span><br><span class="line">  ..&#x2F;include&#x2F;linux&#x2F;head.h ..&#x2F;include&#x2F;linux&#x2F;fs.h ..&#x2F;include&#x2F;linux&#x2F;mm.h \</span><br><span class="line">  ..&#x2F;include&#x2F;linux&#x2F;kernel.h ..&#x2F;include&#x2F;linux&#x2F;tty.h ..&#x2F;include&#x2F;termios.h \</span><br><span class="line">  ..&#x2F;include&#x2F;asm&#x2F;segment.h</span><br></pre></td></tr></table></figure><p>添加了 who.s who.o: who.c ../include/linux/kernel.h ../include/unistd.h。</p><p>Makefile 修改后，和往常一样 make all 就能自动把 who.c 加入到内核中了。</p><p>如果编译时提示 who.c 有错误，就说明修改生效了。所以，有意或无意地制造一两个错误也不完全是坏事，至少能证明 Makefile 是对的。</p><h4 id="3-4、-用-printk-调试内核"><a href="#3-4、-用-printk-调试内核" class="headerlink" title="3.4、 用 printk() 调试内核"></a>3.4、 用 printk() 调试内核</h4><p>oslab 实验环境提供了基于 C 语言和汇编语言的两种调试手段。除此之外，适当地向屏幕输出一些程序运行状态的信息，也是一种很高效、便捷的调试方法，有时甚至是唯一的方法，被称为“printf 法”。</p><p>要知道到，printf() 是一个只能在用户模式下执行的函数，而系统调用是在内核模式中运行，所以 printf() 不可用，要用 printk()。</p><p>printk() 和 printf() 的接口和功能基本相同，只是代码上有一点点不同。printk() 需要特别处理一下 fs 寄存器，它是专用于用户模式的段寄存器。</p><p>看一看 printk 的代码（在 kernel/printk.c 中）就知道了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printk</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    ……</span></span><br><span class="line">    __asm__(<span class="string">&quot;push %%fs\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;push %%ds\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;pop %%fs\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;pushl %0\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;pushl $buf\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;pushl $0\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;call tty_write\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;addl $8,%%esp\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;popl %0\n\t&quot;</span></span><br><span class="line">            <span class="string">&quot;pop %%fs&quot;</span></span><br><span class="line">            ::<span class="string">&quot;r&quot;</span> (i):<span class="string">&quot;ax&quot;</span>,<span class="string">&quot;cx&quot;</span>,<span class="string">&quot;dx&quot;</span>);</span><br><span class="line"><span class="comment">//    ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，printk() 首先 push %fs 保存这个指向用户段的寄存器，在最后 pop %fs 将其恢复，printk() 的核心仍然是调用 tty_write()。查看 printf() 可以看到，它最终也要落实到这个函数上。</p><h4 id="3-5、编写测试程序"><a href="#3-5、编写测试程序" class="headerlink" title="3.5、编写测试程序"></a>3.5、编写测试程序</h4><p>激动地运行一下由你亲手修改过的 “Linux 0.11 pro++”！然后编写一个简单的应用程序进行测试。</p><p>比如在 sys_iam() 中向终端 printk() 一些信息，让应用程序调用 iam()，从结果可以看出系统调用是否被真的调用到了。</p><p>可以直接在 Linux 0.11 环境下用 vi 编写（别忘了经常执行“sync”以确保内存缓冲区的数据写入磁盘），也可以在 Ubuntu 或 Windows 下编完后再传到 Linux 0.11 下。无论如何，最终都必须在 Linux 0.11 下编译。编译命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -o iam iam.c -Wall</span><br></pre></td></tr></table></figure><p>gcc 的 “-Wall” 参数是给出所有的编译警告信息，“-o” 参数指定生成的执行文件名是 iam，用下面命令运行它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;iam</span><br></pre></td></tr></table></figure><p>如果如愿输出了你的信息，就说明你添加的系统调用生效了。否则，就还要继续调试，祝你好运！</p><h4 id="3-6、-在用户态和核心态之间传递数据"><a href="#3-6、-在用户态和核心态之间传递数据" class="headerlink" title="3.6、 在用户态和核心态之间传递数据"></a>3.6、 在用户态和核心态之间传递数据</h4><p>指针参数传递的是应用程序所在地址空间的逻辑地址，在内核中如果直接访问这个地址，访问到的是内核空间中的数据，不会是用户空间的。所以这里还需要一点儿特殊工作，才能在内核中从用户空间得到数据。</p><p>要实现的两个系统调用参数中都有字符串指针，非常像 open(char *filename, ……)，所以我们看一下 open() 系统调用是如何处理的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * filename, <span class="keyword">int</span> flag, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    ……</span></span><br><span class="line">    __asm__(<span class="string">&quot;int $0x80&quot;</span></span><br><span class="line">            :<span class="string">&quot;=a&quot;</span> (res)</span><br><span class="line">            :<span class="string">&quot;0&quot;</span> (__NR_open),<span class="string">&quot;b&quot;</span> (filename),<span class="string">&quot;c&quot;</span> (flag),</span><br><span class="line">            <span class="string">&quot;d&quot;</span> (va_arg(arg,<span class="keyword">int</span>)));</span><br><span class="line"><span class="comment">//    ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，系统调用是用 eax、ebx、ecx、edx 寄存器来传递参数的。</p><p>其中 eax 传递了系统调用号，而 ebx、ecx、edx 是用来传递函数的参数的<br>ebx 对应第一个参数，ecx 对应第二个参数，依此类推。<br>如 open 所传递的文件名指针是由 ebx 传递的，也即进入内核后，通过 ebx 取出文件名字符串。open 的 ebx 指向的数据在用户空间，而当前执行的是内核空间的代码，如何在用户态和核心态之间传递数据？</p><p>接下来我们继续看看 open 的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">system_call: <span class="comment">//所有的系统调用都从system_call开始</span></span><br><span class="line">!    ……</span><br><span class="line">    pushl %edx</span><br><span class="line">    pushl %ecx</span><br><span class="line">    pushl %ebx                # push %ebx,%ecx,%edx，这是传递给系统调用的参数</span><br><span class="line">    movl $0x10,%edx            # 让ds,es指向GDT，指向核心地址空间</span><br><span class="line">    mov %dx,%ds</span><br><span class="line">    mov %dx,%es</span><br><span class="line">    movl $0x17,%edx            # 让fs指向的是LDT，指向用户地址空间</span><br><span class="line">    mov %dx,%fs</span><br><span class="line">    <span class="function">call <span class="title">sys_call_table</span><span class="params">(,%eax,<span class="number">4</span>)</span>    # 即call sys_open</span></span><br></pre></td></tr></table></figure><p>由上面的代码可以看出，获取用户地址空间（用户数据段）中的数据依靠的就是段寄存器 fs，下面该转到 sys_open 执行了，在 fs/open.c 文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * filename,<span class="keyword">int</span> flag,<span class="keyword">int</span> mode)</span>  <span class="comment">//filename这些参数从哪里来？</span></span></span><br><span class="line"><span class="function"><span class="comment">/*是否记得上面的pushl %edx,    pushl %ecx,    pushl %ebx？</span></span></span><br><span class="line"><span class="function"><span class="comment">  实际上一个C语言函数调用另一个C语言函数时，编译时就是将要</span></span></span><br><span class="line"><span class="function"><span class="comment">  传递的参数压入栈中（第一个参数最后压，…），然后call …，</span></span></span><br><span class="line"><span class="function"><span class="comment">  所以汇编程序调用C函数时，需要自己编写这些参数压栈的代码…*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">if</span> ((i=open_namei(filename,flag,mode,&amp;inode))&lt;<span class="number">0</span>) &#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它将参数传给了 open_namei()。</p><p>再沿着 open_namei() 继续查找，文件名先后又被传给dir_namei()、get_dir()。</p><p>在 get_dir() 中可以看到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> struct m_inode * get_dir(<span class="keyword">const</span> <span class="keyword">char</span> * pathname)</span><br><span class="line">&#123;</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">if</span> ((c=get_fs_byte(pathname))==<span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、运行脚本程序"><a href="#四、运行脚本程序" class="headerlink" title="四、运行脚本程序"></a>四、运行脚本程序</h3><p>Linux 的一大特色是可以编写功能强大的 shell 脚本，提高工作效率。本实验的部分评分工作由脚本 testlab2.sh 完成。它的功能是测试 iam.c 和 whoami.c。</p><p>首先将 iam.c 和 whoami.c 分别编译成 iam 和 whoami，然后将 testlab2.sh（在 /home/teacher 目录下） 拷贝到同一目录下。</p><p>用下面命令为此脚本增加执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x testlab2.sh</span><br></pre></td></tr></table></figure><p>然后运行之：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;testlab2.sh</span><br></pre></td></tr></table></figure><p>根据输出，可知 iam.c 和 whoami.c 的得分。</p><p>errno<br>errno 是一种传统的错误代码返回机制。</p><p>当一个函数调用出错时，通常会返回 -1 给调用者。但 -1 只能说明出错，不能说明错是什么。为解决此问题，全局变量 errno 登场了。错误值被存放到 errno 中，于是调用者就可以通过判断 errno 来决定如何应对错误了。</p><p>各种系统对 errno 的值的含义都有标准定义。Linux 下用“man errno”可以看到这些定义。</p>]]></content>
    
    
    <summary type="html">linux-0.11 的 lib 目录下有一些已经实现的 API。Linus 编写它们的原因是在内核加载完毕后，会切换到用户模式下，做一些初始化工作，然后启动 shell。而用户模式下的很多工作需要依赖一些系统调用才能完成，因此在内核中实现了这些系统调用的 API。</summary>
    
    
    
    <category term="哈工大操作系统实验" scheme="https://www.lianghuan.zone/categories/%E5%93%88%E5%B7%A5%E5%A4%A7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="https://www.lianghuan.zone/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://www.lianghuan.zone/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linux0.11操作系统引导程序</title>
    <link href="https://www.lianghuan.zone/2022/04/19/Linux0.11%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E7%A8%8B%E5%BA%8F/"/>
    <id>https://www.lianghuan.zone/2022/04/19/Linux0.11%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-04-19T12:38:49.000Z</published>
    <updated>2022-04-28T08:54:14.282Z</updated>
    
    <content type="html"><![CDATA[<p>Linux内核完全注释中对系统引导总体功能描述：<br><img src="https://img-blog.csdnimg.cn/4833a805a18d4984948e839fa143cf85.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC55aSp5LuH54ix5pCe56CB,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/66c6c61ee7b847469625e7eb7d4d0211.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC55aSp5LuH54ix5pCe56CB,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/99904c7d3ffc41b89f2334885ef7b4b3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC55aSp5LuH54ix5pCe56CB,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0c7162750ae64d0e8e083c72f49ba213.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC55aSp5LuH54ix5pCe56CB,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h4 id="一、修改bootsec-s实现屏幕输出"><a href="#一、修改bootsec-s实现屏幕输出" class="headerlink" title="一、修改bootsec.s实现屏幕输出"></a>一、修改bootsec.s实现屏幕输出</h4><h5 id="1-1、代码修改"><a href="#1-1、代码修改" class="headerlink" title="1.1、代码修改"></a>1.1、代码修改</h5><p>代码中以 ! 开头的行都是注释，实际在写代码时可以忽略。<br>补充：<br>INT 10H 是由 BIOS 对屏幕及显示器所提供的服务程序，使用 INT 10H 中断服务程序时，先指定 AH 寄存器为下表编号其中之一，该编号表示欲调用的功用，而其他寄存器的详细说明，参考表后文字，当一切设定好之后再调用 INT 10H。底下是它们的说明：<br><img src="https://img-blog.csdnimg.cn/35cdaf2bbe19463683e8c75cd83ecddb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC55aSp5LuH54ix5pCe56CB,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/da08416f89354ee3a24b9b758b6f983c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC55aSp5LuH54ix5pCe56CB,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">entry _start</span><br><span class="line">_start:</span><br><span class="line">! 首先读入光标位置</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">! 显示字符串 “Hello OS world, my name is mmm”</span><br><span class="line">! 要显示的字符串长度</span><br><span class="line">! 字符用ascill码进行存储，一个字符占用一个字节。对于换行和回车直接将换行和回车的ascii以字节的形式进行存储</span><br><span class="line">! 字符前面换行回车一对是两个字符，后面两对是四个字符，文本信息是30个字符，一共是36个字符</span><br><span class="line">    mov cx,#36</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg1</span><br><span class="line">! es:bp 是显示字符串的地址</span><br><span class="line">! 相比与 linux-0.11 中的代码，需要增加对 es 的处理，因为原代码中在输出之前已经处理了 es</span><br><span class="line">    mov ax,#0x07c0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line">! 设置一个无限循环</span><br><span class="line">inf_loop:</span><br><span class="line">    jmp inf_loop</span><br><span class="line">! msg1 处放置字符串</span><br><span class="line">msg1:</span><br><span class="line">! 换行 + 回车</span><br><span class="line">    .byte   13,10</span><br><span class="line">    .ascii  &quot;Hello OS world, my name is mmm&quot;</span><br><span class="line">    .byte   13,10,13,10</span><br><span class="line">! boot_flag 必须在最后两个字节</span><br><span class="line">.org 510</span><br><span class="line">! 设置引导扇区标记 0xAA55</span><br><span class="line">! 必须有它，才能引导</span><br><span class="line">boot_flag:</span><br><span class="line">    .word   0xAA55</span><br></pre></td></tr></table></figure><p>这里需要修改的是字符串长度，即用需要输出的字符串长度替换 mov cx,#24 中的 24。要注意：除了我们设置的字符串 msg1 之外，还有三个换行 + 回车，一共是 6 个字符。比如这里 Hello OS world, my name is LZJ 的长度是 30，加上 6 后是 36，所以代码应该修改为 mov cx,#36。将 .org 508 修改为 .org 510，是因为这里不需要 root_dev: .word ROOT_DEV，为了保证 boot_flag 一定在最后两个字节，所以要修改 .org。</p><h5 id="1-2、编译运行"><a href="#1-2、编译运行" class="headerlink" title="1.2、编译运行"></a>1.2、编译运行</h5><p>Ubuntu 上先从终端进入 ~/oslab/linux-0.11/boot/ 目录。<br>无论那种系统，都执行下面两个命令编译和链接 bootsect.s：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ as86 -0 -a -o bootsect.o bootsect.s</span><br><span class="line">$ ld86 -0 -s -o bootsect bootsect.o</span><br></pre></td></tr></table></figure><p>其中 -0（注意：这是数字 0，不是字母 O）表示生成 8086 的 16 位目标程序，-a 表示生成与 GNU as 和 ld 部分兼容的代码，-s 告诉链接器 ld86 去除最后生成的可执行文件中的符号信息，详细的可选项如下：<br><a href="https://linux.die.net/man/1/as86">Assembler for 8086</a><br><a href="https://linux.die.net/man/1/ld86">Linker for as86</a></p><p>如果这两个命令没有任何输出，说明编译与链接都通过了。<br>需要留意的文件是 bootsect 的文件大小是 544 字节，而引导程序必须要正好占用一个磁盘扇区，即 512 个字节。造成多了 32 个字节的原因是 ld86 产生的是 Minix 可执行文件格式，这样的可执行文件除了文本段、数据段等部分以外，还包括一个 Minix 可执行文件头部，它的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct exec &#123;</span><br><span class="line">    unsigned char a_magic[2];  &#x2F;&#x2F;执行文件魔数</span><br><span class="line">    unsigned char a_flags;</span><br><span class="line">    unsigned char a_cpu;       &#x2F;&#x2F;CPU标识号</span><br><span class="line">    unsigned char a_hdrlen;    &#x2F;&#x2F;头部长度，32字节或48字节</span><br><span class="line">    unsigned char a_unused;</span><br><span class="line">    unsigned short a_version;</span><br><span class="line">    long a_text; long a_data; long a_bss; &#x2F;&#x2F;代码段长度、数据段长度、堆长度</span><br><span class="line">    long a_entry;    &#x2F;&#x2F;执行入口地址</span><br><span class="line">    long a_total;    &#x2F;&#x2F;分配的内存总量</span><br><span class="line">    long a_syms;     &#x2F;&#x2F;符号表大小</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>算一算：6 char（6 字节）+ 1 short（2 字节） + 6 long（24 字节）= 32，正好是 32 个字节，去掉这 32 个字节后就可以放入引导扇区了（这是 tools/build.c 的用途之一）。</p><p>对于上面的 Minix 可执行文件，其 a_magic[0]=0x01，a_magic[1]=0x03，a_flags=0x10（可执行文件），a_cpu=0x04（表示 Intel i8086/8088，如果是 0x17 则表示 Sun 公司的 SPARC），所以 bootsect 文件的头几个字节应该是 01 03 10 04。为了验证一下，Ubuntu 下用命令“hexdump -C bootsect”可以看到：</p><p><img src="https://img-blog.csdnimg.cn/85a2c87cc5524098a57935e096ac1a57.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC55aSp5LuH54ix5pCe56CB,size_13,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>要去掉这 32 个字节的文件头部在 Ubuntu 下用命令：<br>Linux dd 命令用于读取、转换并输出数据。</p><p>dd 可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">参数说明:</span><br><span class="line"></span><br><span class="line">if&#x3D;文件名：输入文件名，默认为标准输入。即指定源文件。</span><br><span class="line">of&#x3D;文件名：输出文件名，默认为标准输出。即指定目的文件。</span><br><span class="line">ibs&#x3D;bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。</span><br><span class="line">obs&#x3D;bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。</span><br><span class="line">bs&#x3D;bytes：同时设置读入&#x2F;输出的块大小为bytes个字节。</span><br><span class="line">cbs&#x3D;bytes：一次转换bytes个字节，即指定转换缓冲区大小。</span><br><span class="line">skip&#x3D;blocks：从输入文件开头跳过blocks个块后再开始复制。</span><br><span class="line">seek&#x3D;blocks：从输出文件开头跳过blocks个块后再开始复制。</span><br><span class="line">count&#x3D;blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。</span><br><span class="line">conv&#x3D;&lt;关键字&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dd bs&#x3D;1 if&#x3D;bootsect of&#x3D;Image skip&#x3D;32</span><br></pre></td></tr></table></figure><p>生成的 Image 就是去掉文件头的 bootsect。将生成的文件拷贝到 linux-0.11 目录下，并一定要命名为“Image”（注意大小写）。然后就“run”吧！</p><h4 id="二、bootsect-s-读入-setup-s"><a href="#二、bootsect-s-读入-setup-s" class="headerlink" title="二、bootsect.s 读入 setup.s"></a>二、bootsect.s 读入 setup.s</h4><p>编写一个 setup.s，该 setup.s 可以就直接拷贝前面的 bootsect.s（还需要简单的调整），然后将其中的显示的信息改为：“Now we are in SETUP”。<br>接下来需要编写 bootsect.s 中载入 setup.s 的关键代码。原版 bootsect.s 中下面的代码就是做这个的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">load_setup:</span><br><span class="line">! 设置驱动器和磁头(drive 0, head 0): 软盘 0 磁头</span><br><span class="line">    mov dx,#0x0000</span><br><span class="line">! 设置扇区号和磁道(sector 2, track 0): 0 磁头、0 磁道、2 扇区</span><br><span class="line">    mov cx,#0x0002</span><br><span class="line">! 设置读入的内存地址：BOOTSEG+address &#x3D; 512，偏移512字节</span><br><span class="line">    mov bx,#0x0200</span><br><span class="line">! 设置读入的扇区个数(service 2, nr of sectors)，</span><br><span class="line">! SETUPLEN是读入的扇区个数，Linux 0.11 设置的是 4，</span><br><span class="line">! 我们不需要那么多，我们设置为 2（因此还需要添加变量 SETUPLEN&#x3D;2）</span><br><span class="line">    mov ax,#0x0200+SETUPLEN</span><br><span class="line">! 应用 0x13 号 BIOS 中断读入 2 个 setup.s扇区</span><br><span class="line">    int 0x13</span><br><span class="line">! 读入成功，跳转到 ok_load_setup: ok - continue</span><br><span class="line">! int13中断中功能02H的出口参数CF寄存器置为0则说明操作成功</span><br><span class="line">    jnc ok_load_setup</span><br><span class="line">! 软驱、软盘有问题才会执行到这里。我们的镜像文件比它们可靠多了</span><br><span class="line">    mov dx,#0x0000</span><br><span class="line">! 否则复位软驱 reset the diskette</span><br><span class="line">    mov ax,#0x0000</span><br><span class="line">    int 0x13</span><br><span class="line">! 重新循环，再次尝试读取</span><br><span class="line">    jmp load_setup</span><br><span class="line">ok_load_setup:</span><br><span class="line">! 接下来要干什么？当然是跳到 setup 执行。</span><br><span class="line">! 要注意：我们没有将 bootsect 移到 0x9000，因此跳转后的段地址应该是 0x7ce0</span><br><span class="line">! 即我们要设置 SETUPSEG&#x3D;0x07e0</span><br></pre></td></tr></table></figure><p>补充：<br><a href="https://blog.csdn.net/jackailson/article/details/84109450">int 13H中断也叫直接磁盘服务（Direct Disk Service）</a><br>功能00H ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">功能描述：磁盘系统复位 </span><br><span class="line">入口参数：</span><br><span class="line">AH＝00H </span><br><span class="line">DL＝驱动器，00H~7FH：软盘；80H~0FFH：硬盘 </span><br><span class="line">出口参数：</span><br><span class="line">CF＝0——操作成功，AH＝00H，否则，AH＝状态代码，参见功能号01H中的说明 </span><br></pre></td></tr></table></figure><p>功能02H：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">功能描述：读扇区 </span><br><span class="line">入口参数：</span><br><span class="line">AH＝02H </span><br><span class="line">AL＝扇区数 </span><br><span class="line">CH＝柱面 </span><br><span class="line">CL＝扇区 </span><br><span class="line">DH＝磁头 </span><br><span class="line">DL＝驱动器，00H~7FH：软盘；80H~0FFH：硬盘 ES:BX＝缓冲区的地址 </span><br><span class="line">出口参数</span><br><span class="line">：CF＝0——操作成功，AH＝00H，AL＝传输的扇区数，否则，AH＝状态代码，参见功能号01H中的说明 </span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">SETUPLEN&#x3D;2</span><br><span class="line">SETUPSEG&#x3D;0x07e0</span><br><span class="line">entry _start</span><br><span class="line">_start:</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">    mov cx,#36</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg1</span><br><span class="line">    mov ax,#0x07c0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line">load_setup:</span><br><span class="line">    mov dx,#0x0000</span><br><span class="line">    mov cx,#0x0002</span><br><span class="line">    mov bx,#0x0200</span><br><span class="line">    mov ax,#0x0200+SETUPLEN</span><br><span class="line">    int 0x13</span><br><span class="line">    jnc ok_load_setup</span><br><span class="line">    mov dx,#0x0000</span><br><span class="line">    mov ax,#0x0000</span><br><span class="line">    int 0x13</span><br><span class="line">    jmp load_setup</span><br><span class="line">ok_load_setup:</span><br><span class="line">    jmpi    0,SETUPSEG</span><br><span class="line">msg1:</span><br><span class="line">    .byte   13,10</span><br><span class="line">    .ascii  &quot;Hello OS world, my name is LZJ&quot;</span><br><span class="line">    .byte   13,10,13,10</span><br><span class="line">.org 510</span><br><span class="line">boot_flag:</span><br><span class="line">    .word   0xAA55</span><br></pre></td></tr></table></figure><p>现在有两个文件都要编译、链接。一个个手工编译，效率低下，所以借助 Makefile 是最佳方式。<br>在 Ubuntu 下，进入 linux-0.11 目录后，使用下面命令（注意大小写）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make BootImage</span><br></pre></td></tr></table></figure><p>无论哪种系统，都会看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unable to open &#39;system&#39;</span><br><span class="line">make: *** [BootImage] Error 1</span><br></pre></td></tr></table></figure><p>有 Error！这是因为 make 根据 Makefile 的指引执行了 tools/build.c，它是为生成整个内核的镜像文件而设计的，没考虑我们只需要 bootsect.s 和 setup.s 的情况。它在向我们要 “系统” 的核心代码。为完成实验，接下来给它打个小补丁。</p><p>build.c 从命令行参数得到 bootsect、setup 和 system 内核的文件名，将三者做简单的整理后一起写入 Image。其中 system 是第三个参数（argv[3]）。当 “make all” 或者 “makeall” 的时候，这个参数传过来的是正确的文件名，build.c 会打开它，将内容写入 Image。而 “make BootImage” 时，传过来的是字符串 “none”。所以，改造 build.c 的思路就是当 argv[3] 是”none”的时候，只写 bootsect 和 setup，忽略所有与 system 有关的工作，或者在该写 system 的位置都写上 “0”。<br>修改工作主要集中在 build.c 的尾部，可以参考下面的方式，将圈起来的部分注释掉。<br><img src="https://img-blog.csdnimg.cn/9b78adb013b7479d9b8a89ae43333c7a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC55aSp5LuH54ix5pCe56CB,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>编译成功后再 run。</p><h4 id="三、setup-s-获取基本硬件参数"><a href="#三、setup-s-获取基本硬件参数" class="headerlink" title="三、setup.s 获取基本硬件参数"></a>三、setup.s 获取基本硬件参数</h4><p>setup.s 将获得硬件参数放在内存的 0x90000 处。原版 setup.s 中已经完成了光标位置、内存大小、显存大小、显卡参数、第一和第二硬盘参数的保存。</p><p>用 ah=#0x03 调用 0x10 中断可以读出光标的位置，用 ah=#0x88 调用 0x15 中断可以读出内存的大小。有些硬件参数的获取要稍微复杂一些，如磁盘参数表。在 PC 机中 BIOS 设定的中断向量表中 int 0x41 的中断向量位置(4*0x41 = 0x0000:0x0104)存放的并不是中断程序的地址（在中断向量表中，一个表项存放一个中断向量，也就是一个中断处理程序的入口地址，对于8086处理器入口地址包含段地址和偏移地址，一共32bit即四个字节。），而是第一个硬盘的基本参数表。第二个硬盘的基本参数表入口地址存于 int 0x46 中断向量位置处。每个硬盘参数表有 16 个字节大小。下表给出了硬盘基本参数表的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">位移大小说明</span><br><span class="line">0x00字柱面数</span><br><span class="line">0x02字节磁头数</span><br><span class="line">.........</span><br><span class="line">0x0E字节每磁道扇区数</span><br><span class="line">0x0F字节保留</span><br></pre></td></tr></table></figure><p>读取磁盘参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mov    ax,#INITSEG</span><br><span class="line">! 设置 ds &#x3D; 0x9000</span><br><span class="line">mov    ds,ax</span><br><span class="line">mov    ah,#0x03</span><br><span class="line">! 读入光标位置</span><br><span class="line">xor    bh,bh</span><br><span class="line">! 调用 0x10 中断</span><br><span class="line">int    0x10</span><br><span class="line">! 将光标位置写入 0x90000.</span><br><span class="line">mov    [0],dx</span><br><span class="line"></span><br><span class="line">! 读入内存大小位置</span><br><span class="line">mov    ah,#0x88</span><br><span class="line">int    0x15</span><br><span class="line">mov    [2],ax</span><br><span class="line"></span><br><span class="line">! 从 0x41中断向量处拷贝 16 个字节（磁盘参数表大小为16字节）</span><br><span class="line">mov    ax,#0x0000</span><br><span class="line">mov    ds,ax</span><br><span class="line">lds    si,[4*0x41]</span><br><span class="line">mov    ax,#INITSEG</span><br><span class="line">mov    es,ax</span><br><span class="line">mov    di,#0x0004</span><br><span class="line">mov    cx,#0x10</span><br><span class="line">! 重复16次</span><br><span class="line">rep</span><br><span class="line">movsb</span><br></pre></td></tr></table></figure><h4 id="四、setup-s-显示获得的参数"><a href="#四、setup-s-显示获得的参数" class="headerlink" title="四、setup.s 显示获得的参数"></a>四、setup.s 显示获得的参数</h4><p>现在已经将硬件参数（只包括光标位置、内存大小和硬盘参数，其他硬件参数取出的方法基本相同，此处略去）取出来放在了 0x90000 处，接下来的工作是将这些参数显示在屏幕上。这些参数都是一些无符号整数，所以需要做的主要工作是用汇编程序在屏幕上将这些整数显示出来。</p><p>以十六进制方式显示比较简单。这是因为十六进制与二进制有很好的对应关系（每 4 位二进制数和 1 位十六进制数存在一一对应关系），显示时只需将原二进制数每 4 位划成一组，按组求对应的 ASCII 码送显示器即可。ASCII 码与十六进制数字的对应关系为：0x30 ～ 0x39 对应数字 0 ～ 9，0x41 ～ 0x46 对应数字 a ～ f。从数字 9 到 a，其 ASCII 码间隔了 7h，这一点在转换时要特别注意。为使一个十六进制数能按高位到低位依次显示，实际编程中，需对 bx 中的数每次循环左移一组（4 位二进制），然后屏蔽掉当前高 12 位，对当前余下的 4 位（即 1 位十六进制数）求其 ASCII 码，要判断它是 0 ～ 9 还是 a ～ f，是前者则加 0x30 得对应的 ASCII 码，后者则要加 0x37 才行，最后送显示器输出。以上步骤重复 4 次，就可以完成 bx 中数以 4 位十六进制的形式显示出来。</p><p>下面是完成显示 16 进制数的汇编语言程序的关键代码，其中用到的 BIOS 中断为 INT 0x10，功能号 0x0E（显示一个字符），即 AH=0x0E，AL=要显示字符的 ASCII 码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">! 以 16 进制方式打印栈顶的16位数</span><br><span class="line">print_hex:</span><br><span class="line">! 4 个十六进制数字</span><br><span class="line">    mov cx,#4</span><br><span class="line">! 将(bp)所指的值放入 dx 中，如果 bp 是指向栈顶的话</span><br><span class="line">    mov dx,(bp)</span><br><span class="line">print_digit:</span><br><span class="line">! 循环以使低 4 比特用上 !! 取 dx 的高 4 比特移到低 4 比特处。</span><br><span class="line">    rol dx,#4</span><br><span class="line">! ah &#x3D; 请求的功能值，al &#x3D; 半字节(4 个比特)掩码。</span><br><span class="line">    mov ax,#0xe0f</span><br><span class="line">! 取 dl 的低 4 比特值。</span><br><span class="line">    and al,dl</span><br><span class="line">! 给 al 数字加上十六进制 0x30</span><br><span class="line">    add al,#0x30</span><br><span class="line">    cmp al,#0x3a</span><br><span class="line">! 是一个不大于十的数字</span><br><span class="line">    jl  outp</span><br><span class="line">! 是a～f，要多加 7</span><br><span class="line">    add al,#0x07</span><br><span class="line">outp:</span><br><span class="line">    int 0x10</span><br><span class="line">    loop    print_digit</span><br><span class="line">    ret</span><br><span class="line">! 这里用到了一个 loop 指令;</span><br><span class="line">! 每次执行 loop 指令，cx 减 1，然后判断 cx 是否等于 0。</span><br><span class="line">! 如果不为 0 则转移到 loop 指令后的标号处，实现循环；</span><br><span class="line">! 如果为0顺序执行。</span><br><span class="line">!</span><br><span class="line">! 另外还有一个非常相似的指令：rep 指令，</span><br><span class="line">! 每次执行 rep 指令，cx 减 1，然后判断 cx 是否等于 0。</span><br><span class="line">！ 如果不为 0 则继续执行 rep 指令后的串操作指令，直到 cx 为 0，实现重复。</span><br><span class="line"></span><br><span class="line">! 打印回车换行</span><br><span class="line">print_nl:</span><br><span class="line">! CR</span><br><span class="line">    mov ax,#0xe0d</span><br><span class="line">    int 0x10</span><br><span class="line">! LF</span><br><span class="line">    mov al,#0xa</span><br><span class="line">    int 0x10</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>只要在适当的位置调用 print_bx 和 print_nl（注意，一定要设置好栈，才能进行函数调用）就能将获得硬件参数打印到屏幕上，完成此次实验的任务。但事情往往并不总是顺利的，前面的两个实验大多数实验者可能一次就编译调试通过了（这里要提醒大家：编写操作系统的代码一定要认真，因为要调试操作系统并不是一件很方便的事）。但在这个实验中会出现运行结果不对的情况（为什么呢？因为我们给的代码并不是 100% 好用的）。所以接下来要复习一下汇编，并阅读《Bochs 使用手册》，学学在 Bochs 中如何调试操作系统代码。<br>Memory Size 是 0x3C00KB，算一算刚好是 15MB（扩展内存），加上 1MB 正好是 16MB，看看 Bochs 配置文件 bochs/bochsrc.bxrc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!……</span><br><span class="line">megs: 16</span><br><span class="line">!……</span><br><span class="line">ata0-master: type&#x3D;disk, mode&#x3D;flat, cylinders&#x3D;410, heads&#x3D;16, spt&#x3D;38</span><br><span class="line">!……</span><br></pre></td></tr></table></figure><p>参考代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">INITSEG  &#x3D; 0x9000</span><br><span class="line">entry _start</span><br><span class="line">_start:</span><br><span class="line">! Print &quot;NOW we are in SETUP&quot;</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">    mov cx,#25</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg2</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line"></span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov es,ax</span><br><span class="line">! init ss:sp</span><br><span class="line">    mov ax,#INITSEG</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,#0xFF00</span><br><span class="line">! 获取到的参数放到0x90000处</span><br><span class="line">! Get Params</span><br><span class="line">    mov ax,#INITSEG</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">    mov [0],dx</span><br><span class="line">    mov ah,#0x88</span><br><span class="line">    int 0x15</span><br><span class="line">    mov [2],ax</span><br><span class="line">    mov ax,#0x0000</span><br><span class="line">    mov ds,ax</span><br><span class="line">    lds si,[4*0x41]</span><br><span class="line">    mov ax,#INITSEG</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov di,#0x0004</span><br><span class="line">    mov cx,#0x10</span><br><span class="line">    rep</span><br><span class="line">    movsb</span><br><span class="line"></span><br><span class="line">! Be Ready to Print</span><br><span class="line">    mov ax,cs</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov ax,#INITSEG</span><br><span class="line">    mov ds,ax</span><br><span class="line"></span><br><span class="line">! Cursor Position</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">! 要显示的字符串长度</span><br><span class="line">! 字符用ascill码进行存储，一个字符占用一个字节。对于换行和回车直接将换行和回车的ascii以字节的形式进行存储</span><br><span class="line">! 字符前面换行回车一对是两个字符，文本信息是16个字符，一共是18个字符</span><br><span class="line">! es:bp是要显示的字符串所存放的位置</span><br><span class="line">    mov cx,#18</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg_cursor</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line">    mov dx,[0]</span><br><span class="line">    call    print_hex</span><br><span class="line">! Memory Size</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">    mov cx,#14</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg_memory</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line">    mov dx,[2]</span><br><span class="line">    call    print_hex</span><br><span class="line">! Add KB</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">    mov cx,#2</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg_kb</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line">! Cyles</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">    mov cx,#7</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg_cyles</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line">    mov dx,[4]</span><br><span class="line">    call    print_hex</span><br><span class="line">! Heads</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">    mov cx,#8</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg_heads</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line">    mov dx,[6]</span><br><span class="line">    call    print_hex</span><br><span class="line">! Secotrs</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">    mov cx,#10</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg_sectors</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line">    mov dx,[12]</span><br><span class="line">    call    print_hex</span><br><span class="line">! 设置一个无限循环</span><br><span class="line">inf_loop:</span><br><span class="line">    jmp inf_loop</span><br><span class="line"></span><br><span class="line">! 硬件名称字符串位置是放在es:ip中的，硬件参数是以二进制形式放在0x90000处开始存放的，直接将段地址修改进行间接取指</span><br><span class="line">print_hex:</span><br><span class="line">    mov    cx,#4</span><br><span class="line">print_digit:</span><br><span class="line">    rol    dx,#4</span><br><span class="line">    mov    ax,#0xe0f</span><br><span class="line">    and    al,dl</span><br><span class="line">    add    al,#0x30</span><br><span class="line">    cmp    al,#0x3a</span><br><span class="line">    jl     outp</span><br><span class="line">    add    al,#0x07</span><br><span class="line">outp:</span><br><span class="line">    int    0x10</span><br><span class="line">    loop   print_digit</span><br><span class="line">    ret</span><br><span class="line">print_nl:</span><br><span class="line">    mov    ax,#0xe0d     ! CR</span><br><span class="line">    int    0x10</span><br><span class="line">    mov    al,#0xa     ! LF</span><br><span class="line">    int    0x10</span><br><span class="line">    ret</span><br><span class="line"></span><br><span class="line">msg2:</span><br><span class="line">    .byte 13,10</span><br><span class="line">    .ascii &quot;NOW we are in SETUP&quot;</span><br><span class="line">    .byte 13,10,13,10</span><br><span class="line">msg_cursor:</span><br><span class="line">    .byte 13,10</span><br><span class="line">    .ascii &quot;Cursor position:&quot;</span><br><span class="line">msg_memory:</span><br><span class="line">    .byte 13,10</span><br><span class="line">    .ascii &quot;Memory Size:&quot;</span><br><span class="line">msg_cyles:</span><br><span class="line">    .byte 13,10</span><br><span class="line">    .ascii &quot;Cyls:&quot;</span><br><span class="line">msg_heads:</span><br><span class="line">    .byte 13,10</span><br><span class="line">    .ascii &quot;Heads:&quot;</span><br><span class="line">msg_sectors:</span><br><span class="line">    .byte 13,10</span><br><span class="line">    .ascii &quot;Sectors:&quot;</span><br><span class="line">msg_kb:</span><br><span class="line">    .ascii &quot;KB&quot;</span><br><span class="line"></span><br><span class="line">.org 510</span><br><span class="line">boot_flag:</span><br><span class="line">    .word 0xAA55</span><br></pre></td></tr></table></figure><blockquote><p> \n 10 换行NL \r 13 回车CR</p><p>回车 \r 本义是光标重新回到本行开头，r的英文return，控制字符可以写成CR，即Carriage Return 换行 \n<br>本义是光标往下一行（不一定到下一行行首），n的英文newline，控制字符可以写成LF，即Line Feed<br>在UNIX类系统，换行\n就表现为光标下一行并回到行首。</p></blockquote>]]></content>
    
    
    <summary type="html">INT 10H 是由 BIOS 对屏幕及显示器所提供的服务程序，使用 INT 10H 中断服务程序时，先指定 AH 寄存器为下表编号其中之一，该编号表示欲调用的功用，而其他寄存器的详细说明，参考表后文字，当一切设定好之后再调用 INT 10H。</summary>
    
    
    
    <category term="哈工大操作系统实验" scheme="https://www.lianghuan.zone/categories/%E5%93%88%E5%B7%A5%E5%A4%A7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="https://www.lianghuan.zone/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://www.lianghuan.zone/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>编译运行Linux0.11内核程序</title>
    <link href="https://www.lianghuan.zone/2022/04/16/%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8CLinux0-11%E5%86%85%E6%A0%B8%E7%A8%8B%E5%BA%8F/"/>
    <id>https://www.lianghuan.zone/2022/04/16/%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8CLinux0-11%E5%86%85%E6%A0%B8%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-04-16T12:38:49.000Z</published>
    <updated>2022-04-28T08:53:32.749Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注意：实验之前需要用VNC搭建Ubuntu可视化界面</strong></p><h4 id="一、编译内核"><a href="#一、编译内核" class="headerlink" title="一、编译内核"></a>一、编译内核</h4><p>首先要进入 linux-0.11 目录，然后执行 make 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd .&#x2F;linux-0.11&#x2F;</span><br><span class="line">$ make all</span><br></pre></td></tr></table></figure><p>因为 all 是最常用的参数，所以可以省略，只用 make，效果一样。<br>在多处理器的系统上，可以用 -j 参数进行并行编译，加快速度。例如双 CPU 的系统可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make -j 2</span><br><span class="line">copy</span><br></pre></td></tr></table></figure><p>最后生成的目标文件是一个软盘镜像文件—— linux-0.11/Image（下面的图中给出了详细的信息）。如果将此镜像文件写到一张 1.44MB 的软盘上，就可以启动一台真正的计算机。<br>linux-0.11 目录下是全部的源代码，很多实验内容都是要靠修改这些代码来完成。修改后需要重新编译内核，还是执行命令：make all。<br>make 命令会自动跳过未被修改的文件，链接时直接使用上次编译生成的目标文件，从而节约编译时间。但如果重新编译后，你的修改貌似没有生效，可以试试先 make clean ，再 make all（或者一行命令：make clean &amp;&amp; make all。make clean 是删除上一次编译生成的所有中间文件和目标文件，确保是在全新的状态下编译整个工程。</p><h4 id="二、在-Bochs-中运行最新编译好的内核"><a href="#二、在-Bochs-中运行最新编译好的内核" class="headerlink" title="二、在 Bochs 中运行最新编译好的内核"></a>二、在 Bochs 中运行最新编译好的内核</h4><p>退出当前linux-0.11目录在上级目录中有Bochs的执行命令run，输入命令启动Bochs。<br><img src="https://img-blog.csdnimg.cn/f6a8070df16f44bb9877b1818b6f3783.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bC55aSp5LuH54ix5pCe56CB,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>如果出现 Bochs 的窗口，里面显示 linux 的引导过程，最后停止在 [/usr/root/]#，表示运行成功。</p><h4 id="三、调试"><a href="#三、调试" class="headerlink" title="三、调试"></a>三、调试</h4><h5 id="3-1、汇编级调"><a href="#3-1、汇编级调" class="headerlink" title="3.1、汇编级调"></a>3.1、汇编级调</h5><p>在oslab目录下启动gbd-asm后即可进行调试，详细的调试指令可通过help可进行查看。</p><h5 id="3-2、C语言级调试领"><a href="#3-2、C语言级调试领" class="headerlink" title="3.2、C语言级调试领"></a>3.2、C语言级调试领</h5><p>C 语言级调试稍微复杂一些。首先执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;oslab</span><br><span class="line">$ .&#x2F;dbg-c</span><br></pre></td></tr></table></figure><p>然后再打开一个终端窗口，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;oslab</span><br><span class="line">$ .&#x2F;rungdb</span><br></pre></td></tr></table></figure><p>注意：启动的顺序不能交换，否则 gdb 无法连接。</p><h4 id="四、文件交换"><a href="#四、文件交换" class="headerlink" title="四、文件交换"></a>四、文件交换</h4><p>接下来讲解一下 Ubuntu 和 Linux 0.11 之间的文件交换如何启动，开始设置文件交换之前，务必关闭所有的 Bochs 进程。<br>oslab 下的 hdc-0.11-new.img 是 0.11 内核启动后的根文件系统镜像文件，相当于在 bochs 虚拟机里装载的硬盘。在 Ubuntu 上访问其内容的方法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;oslab&#x2F;</span><br><span class="line">$ sudo .&#x2F;mount-hdc</span><br></pre></td></tr></table></figure><p>之后，hdc 目录下就是和 0.11 内核一模一样的文件系统了，可以读写任何文件（可能有些文件要用 sudo 才能访问）。<br>经过 sudo ./mount-hdc 这样处理以后，我们可以在 Ubuntu 的 hdc 目录下创建一个 xxx.c 文件，然后利用 Ubuntu 上的编辑工具（如 gedit 等）实现对 xxx.c 文件的编辑工作，在编辑保存以后。</p><p>执行 sudo umount hdc 后，再进入 Linux 0.11（即 run 启动 bochs 以后）就会看到这个 xxx.c（即如下图所示），这样就避免了在 Linux 0.11 上进行编辑 xxx.c 的麻烦，因为 Linux 0.11 作为一个很小的操作系统，其上的编辑工具只有 vi，使用起来非常不便。</p><blockquote><p>注意 1：不要在 0.11 内核运行的时候 mount 镜像文件，否则可能会损坏文件系统。同理，也不要在已经 mount 的时候运行<br>0.11 内核。</p><p>注意 2：在关闭 Bochs 之前，需要先在 0.11 的命令行运行 “sync”，确保所有缓存数据都存盘后，再关闭 Bochs。</p></blockquote>]]></content>
    
    
    <summary type="html">linux-0.11 目录下是全部的源代码，很多实验内容都是要靠修改这些代码来完成。修改后需要重新编译内核，还是执行命令：make all。</summary>
    
    
    
    <category term="哈工大操作系统实验" scheme="https://www.lianghuan.zone/categories/%E5%93%88%E5%B7%A5%E5%A4%A7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="Linux" scheme="https://www.lianghuan.zone/tags/Linux/"/>
    
    <category term="操作系统" scheme="https://www.lianghuan.zone/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>GRASP软件设计的模式和原则</title>
    <link href="https://www.lianghuan.zone/2021/05/08/GRASP%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%8E%9F%E5%88%99/"/>
    <id>https://www.lianghuan.zone/2021/05/08/GRASP%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%8E%9F%E5%88%99/</id>
    <published>2021-05-08T10:26:33.000Z</published>
    <updated>2021-05-20T03:56:02.021Z</updated>
    
    <content type="html"><![CDATA[<h4 id="GRASP是General-Responsibility-Assignment-Software-patterns（通用职责分配软件模式）的简称，它的核心思想是“职责分配（Responsibility-Assignment）”。GRASP提出了几个基本原则，用来解决面向对象设计的一些问题。"><a href="#GRASP是General-Responsibility-Assignment-Software-patterns（通用职责分配软件模式）的简称，它的核心思想是“职责分配（Responsibility-Assignment）”。GRASP提出了几个基本原则，用来解决面向对象设计的一些问题。" class="headerlink" title="GRASP是General Responsibility Assignment Software patterns（通用职责分配软件模式）的简称，它的核心思想是“职责分配（Responsibility Assignment）”。GRASP提出了几个基本原则，用来解决面向对象设计的一些问题。"></a>GRASP是General Responsibility Assignment Software patterns（通用职责分配软件模式）的简称，它的核心思想是“职责分配（Responsibility Assignment）”。GRASP提出了几个基本原则，用来解决面向对象设计的一些问题。</h4><hr><p>Craig Larman氏在《Applying UML and Patterns》一书中提出了GRASP设计模式的概念。作者称其为设计模式，其实，更好的理解应该为设计原则。因为，与GoF等设计模式不同的是，GoF等设计模式是针对特定问题而提出的解决方法，而GRASP则是站在面向对象设计的角度，告诉我们怎么样设计问题空间中的类与它们的行为责任，以及明确类之间的相互关系等等。GRASP可以说是GoF等设计模式的基础。它的核心思想是“职责分配（Responsibility Assignment）”，用职责设计对象：”Designing Objects with Responsibilities”。它包含了9个基本模式：</p><ul><li>信息专家(Information expert)</li></ul><p>信息专家模式是面向对象设计的最基本原则。通俗点来讲，就是一个类只干该干的事情，不该干的事情不干。在系统设计时，需要将职责分配给具有实现这个职责所需要信息的类。信息专家模式对应于面向对象设计原则中的单一职责原则。</p><ul><li>创建者（Creator) </li></ul><p>如果一个类创建了另一个类，那么这两个类之间就有了耦合，也可以说产生了依赖关系。依赖或耦合本身是没有错误的，但是它们带来的问题就是在以后的维护中会产生连锁反应，而必要的耦合是逃不掉的，我们能做的就是正确地创建耦合关系，不要随便建立类之间的依赖关系，那么该如何去做呢？就是要遵守创建者模式规定的基本原则，凡是不符合以上条件的情况，都不能随便用A创建B。<br>创建对象是面向对象系统中最普遍的活动之一，因此，确定一个分配创建对象的通用职责非常重要。如果职责分配合理，设计就能降低耦合，提高设计的清晰度、封装性和重用性。通常情况下，如果对象的创建过程不是很复杂，则根据上述原则，由使用对象的类来创建对象。但是如果创建过程非常复杂，而且可能需要重复使用对象实例或者需要从外部注入一个对象实例，此时，可以委托一个专门的工厂类来辅助创建对象。创建者模式与各种工厂模式（简单工厂模式、工厂方法模式和抽象工厂模式）相对应。</p><ul><li>高内聚(High Cohesion)</li></ul><p>内聚是评价一个元素的职责被关联和关注强弱的尺度。如果一个元素具有很多紧密相关的职责，而且只完成有限的功能，则这个元素就具有高内聚性。此处的元素可以是类，也可以是模块、子系统或者系统。在一个低内聚的类中会执行很多互不相关的操作，这将导致系统难于理解、难于重用、难于维护、过于脆弱，容易受到变化带来的影响。因此我们需要控制类的粒度，在分配类的职责时使其内聚保持为最高，提高类的重用性，控制类设计的复杂程度。为了达到低内聚，我们需要对类进行分解，使得分解出来的类具有独立的职责，满足单一职责原则。在一个类中只保留一组相关的属性和方法，将一些需要在多个类中重用的属性和方法或完成其他功能所需的属性和方法封装在其他类中。类只处理与之相关的功能，它将与其他类协作完成复杂的任务。</p><ul><li>低耦合(Low coupling)</li></ul><p>耦合是评价一个系统中各个元素之间连接或依赖强弱关系的尺度，具有低耦合的元素不过多依赖其他元素。此处的元素可以是类，也可以是模块、子系统或者系统。具有高耦合的类过多地依赖其他类，这种设计将会导致：一个类的修改导致其他类产生较大影响；系统难以维护和理解；系统重用性差，在重用一个高耦合的类时不得不重用它所依赖的其他类。因此需要对高耦合的系统进行重构。</p><ul><li>控制器(Controller)</li></ul><p>一个控制器是负责接收或者处理系统事件的非图形用户界面对象。一个控制器定义一组系统操作方法。在控制器模式中，要求系统事件的接收与处理通常由一个高级类来代替；一个子系统需要定义多个控制器，分别对应不同的事务处理。通常，一个控制器应当把要完成的功能委托给其他对象，它只负责协调和控制，本身不完成太多的功能。它可以将用户界面所提交的请求转发给其他类来处理，控制器可以重用，且不能包含太多业务逻辑，一个系统通常也不能设计一个统一的控制器。控制器模式与MVC模式相对应，MVC是一种比设计模式更加高级的架构模式。  </p><ul><li>多态性(Polymorphism)</li></ul><p>由条件变化引发同一类型的不同行为是程序的一个基本主题。如果用if-else或switch-case等条件语句来设计程序，当系统发生变化时必须修改程序的业务逻辑，这将导致很难方便地扩展有新变化的程序。另外对于服务器/客户端结构中的可视化组件，有时候需要在不影响客户端的前提下，将服务器的一个组件替换成另一个组件。此时可以使用多态来实现，将不同的行为指定给不同的子类，多态是设计系统如何处理相似变化的基本方法，基于多态分配职责的设计可以方便地处理新的变化。</p><ul><li>纯虚构(Pure Fabrication)</li></ul><p>纯虚构模式用于解决高内聚和低耦合之间的矛盾，它要求将一部分类的职责转移到纯虚构类中，在理想情况下，分配给这种虚构类的职责是为了达到高内聚和低耦合的目的。在实际操作过程中，纯虚构有很多种实现方式，例如将数据库操作的方法从数据库实体类中剥离出来，形成专门的数据访问类，通过对类的分解来实现类的重用，新增加的数据访问类对应于数据持久化存储，它不是问题域中的概念，而是软件开发者为了处理方便而产生的虚构概念。纯虚构可以消除由于信息专家模式带来的低内聚和高耦合的坏设计，得到一个具有更好重用性的设计。</p><ul><li> 间接性(Indirection)</li></ul><p>要避免对象之间的直接耦合，最常用的做法是在对象之间引入一个中间对象或中介对象，通过中介对象来间接相连。中介模式对应于面向对象设计原则中的迪米特法则，在外观模式、代理模式、中介者模式等设计模式中都体现了中介模式。</p><ul><li>变化预防(Protected Variations)</li></ul><p>找出预计有变化或不稳定的元素，为其创建稳定的“接口”而分配职责。受保护变化模式简称PV，它是大多数编程和设计的基础，是模式的基本动机之一，它使系统能够适应和隔离变化。它与面向对象设计原则中的开闭原则相对应，即在不修改原有元素（类、模块、子系统或系统）的前提下扩展元素的功能。</p>]]></content>
    
    
    <summary type="html">GRASP是General Responsibility Assignment Software patterns（通用职责分配软件模式）的简称，它的核心思想是“职责分配（Responsibility Assignment）”。GRASP提出了几个基本原则，用来解决面向对象设计的一些问题。</summary>
    
    
    
    <category term="设计模式" scheme="https://www.lianghuan.zone/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Java后端" scheme="https://www.lianghuan.zone/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Linux" scheme="https://www.lianghuan.zone/tags/Linux/"/>
    
    <category term="设计模式" scheme="https://www.lianghuan.zone/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>软件复用(SoftWare Reuse)</title>
    <link href="https://www.lianghuan.zone/2021/05/06/%E5%8F%AF%E5%A4%8D%E7%94%A8%E8%BD%AF%E4%BB%B6%EF%BC%88SoftWare%20Reuse%EF%BC%89/"/>
    <id>https://www.lianghuan.zone/2021/05/06/%E5%8F%AF%E5%A4%8D%E7%94%A8%E8%BD%AF%E4%BB%B6%EF%BC%88SoftWare%20Reuse%EF%BC%89/</id>
    <published>2021-05-06T08:32:17.000Z</published>
    <updated>2021-05-20T04:41:42.265Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是复用？"><a href="#什么是复用？" class="headerlink" title="什么是复用？"></a>什么是复用？</h4><p>软件复用(SoftWare Reuse)是将已有软件的各种有关知识用于建立新的软件,以缩减软件开发和维护的花费。软件复用是提高软件生产力和质量的一种重要技术。早期的软件复用主要是代码级复用，被复用的知识专指程序，后来扩大到包括领域知识、开发经验、设计决定、体系结构、需求、设计、代码和文档等一切有关方面。</p><h4 id="复用的级别："><a href="#复用的级别：" class="headerlink" title="复用的级别："></a>复用的级别：</h4><p>   (1）代码的复用</p><blockquote><p>包括目标代码和源代码的复用。其中目标代码的复用级别最低，历史也最久，当前大部分编程语言的运行支持系统都提供了连接（Link）、绑定(Binding)等功能来支持这种复用。</p></blockquote><p>（2）设计的复用</p><blockquote><p>设计结果比源程序的抽象级别更高，因此它的复用受实现环境的影响较少，从而使可复用构件被复用的机会更多，并且所需的修改更少。这种复用有三种途径，第一种途径是从现有系统的设计结果中提取一些可复用的设计构件，并把这些构件应用于新系统的设计；第二种途径是把一个现有系统的全部设计文档在新的软硬件平台上重新实现，也就是把一个设计运用于多个具体的实现；第三种途径是独立于任何具体的应用，有计划地开发一些可复用的设计构件。</p></blockquote><p>（3）分析的复用</p><blockquote><p>这是比设计结果更高级别的复用，可复用的分析构件是针对问题域的某些事物或某些问题的抽象程度更高的解法，受设计技术及实现条件的影响很少，所以可复用的机会更大。复用的途径也有三种，即从现有系统的分析结果中提取可复用构件用于新系统的分析；用一份完整的分析文档作输入产生针对不同软硬件平台和其它实现条件的多项设计；独立于具体应用，专门开发一些可复用的分析构件。</p></blockquote><p>（4）测试信息的复用</p><blockquote><p>主要包括测试用例的复用和测试过程信息的复用。</p></blockquote><h4 id="类的层面"><a href="#类的层面" class="headerlink" title="类的层面"></a>类的层面</h4><p>继承：<br>面向对象的开发语言中自然少不了继承，有了继承，就可以使子类拥有父类的属性和方法，这也是一种复用，甚至可以说是十分重要的一种复用，子类可以不用将某些方法<br>委托<br>在java中类直接调用这个类的static方法，类似c语言中的函数，直接调用就行，这样也是一种类的复用。类似Math.sprt()这种方法。<br>API层面<br>API应该做一件事，且做得很好</p><p>API应该尽可能小，但不能太小</p><p>Implementation不应该影响API</p><p>类的设计：尽量减少可变性，遵循LSP原则</p><p>方法的设计：不要让客户做任何模块可以做的事情，及时报错</p><p>LPS原则<br>定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p><p>定义2：所有引用基类的地方必须能透明地使用其子类的对象。</p><p>问题由来：<br>有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后 的功 能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。</p><p>解决方案：<br>当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法</p><p>LSP依赖于以下限制：<br>前置条件不能强化<br>后置条件不能弱化<br>不变量要保持<br>子类型方法参数：逆变<br>子类型方法的返回值：协变<br>异常类型：协变</p><h4 id="框架层面"><a href="#框架层面" class="headerlink" title="框架层面"></a>框架层面</h4><p>框架：一组具体类、抽象类、及其之间的连接关系<br>开发者根据 framework的规约，填充自己的代码进去，形成完整系统。通常通过选择性覆盖来扩展框架;或者程序员可以添加专门的用户代码来提供特定的功能—即定义继承了抽象类祖先操作的具体类 Hook方法，它被应用程序覆盖以扩展框架。Hook方法系统地将应用程序域的接口和行为与应用程序在特定上下文中所需的变体解耦。 控制反转：与库或标准用户应用程序不同，控制流不是由调用者决定的，而是由框架决定的。不可修改的框架代码：在接受用户实现的扩展时，框架代码不应该被修改。换句话说，用户可以扩展框架，但不应修改其代码。<br>常见的框架类似于spring框架这种，spring框架代码不能修改但是拥有DI,IOC，方便用户创建对象，何时创建对象，交给系统来判断，用户只需要使用对象就行了。<br>类型也有两种：<br>白盒复用：源代码可见，可修改和扩展，复制已有代码当正在开发的系统，进行修改<br>优点：可定制化程度高<br>缺点： 对其修改增加了软件的复杂度，且需要对其内部充分的了解<br>黑盒复用：源代码不可见，不能修改，只能通过API接口来使用，无法修改代码<br>优点：简单清晰<br>缺点：适应性差</p>]]></content>
    
    
    <summary type="html">软件复用(SoftWare Reuse)是将已有软件的各种有关知识用于建立新的软件,以缩减软件开发和维护的花费。软件复用是提高软件生产力和质量的一种重要技术。早期的软件复用主要是代码级复用，被复用的知识专指程序，后来扩大到包括领域知识、开发经验、设计决定、体系结构、需求、设计、代码和文档等一切有关方面。</summary>
    
    
    
    <category term="设计模式" scheme="https://www.lianghuan.zone/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Java后端" scheme="https://www.lianghuan.zone/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
    <category term="设计模式" scheme="https://www.lianghuan.zone/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代码审查(Code Review)</title>
    <link href="https://www.lianghuan.zone/2021/05/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5(Code%20Review)/"/>
    <id>https://www.lianghuan.zone/2021/05/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5(Code%20Review)/</id>
    <published>2021-05-05T04:27:17.000Z</published>
    <updated>2021-05-20T04:57:47.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码审查"><a href="#代码审查" class="headerlink" title="代码审查"></a>代码审查</h1><h4 id="6-031中的软件"><a href="#6-031中的软件" class="headerlink" title="6.031中的软件"></a>6.031中的软件</h4><table><thead><tr><th align="left">防虫</th><th align="left">容易明白</th><th align="left">准备改变</th></tr></thead><tbody><tr><td align="left">今天改正，在未知的未来改正。</td><td align="left">与未来的程序员（包括未来的您）进行清晰的沟通。</td><td align="left">旨在适应变化而无需重写。</td></tr></tbody></table><h4 id="今日课程的目标"><a href="#今日课程的目标" class="headerlink" title="今日课程的目标"></a>今日课程的目标</h4><p>在今天的课程中，我们将练习：</p><ul><li>代码审查：阅读和讨论他人编写的代码</li><li>良好编码的一般原则：无论编程语言或程序用途如何，您都可以在每次代码审查中都可以找到的内容</li></ul><h2 id="代码审查-1"><a href="#代码审查-1" class="headerlink" title="代码审查"></a>代码审查</h2><p>不是代码原始作者的人对代码审查进行仔细，系统的源代码研究。这类似于校对学期论文。</p><p>代码审查确实有两个目的：</p><ul><li><strong>改进代码。</strong> 查找错误，预测可能的错误，检查代码的清晰度以及检查与项目样式标准的一致性。</li><li><strong>改善程序员。</strong> 代码审查是程序员相互学习和教导的重要方式，涉及新的语言功能，项目设计或其编码标准的更改以及新技术。特别是在开源项目中，在代码审查的上下文中发生了很多对话。</li></ul><p>代码审查在Apache和Mozilla等开源项目中得到了广泛的实践。代码审查在行业中也被广泛实践。在Google，您不能将任何代码推送到主存储库中，除非另一位工程师在代码审查中签署了该代码。</p><p>在6.031中，我们将对问题集进行代码审查，如课程网站上的[代码审查文档所述。</p><h3 id="样式标准"><a href="#样式标准" class="headerlink" title="样式标准"></a>样式标准</h3><p>​        大多数公司和大型项目都有编码样式标准（例如Google Java Style这些可以变得非常详细，甚至可以指定空格（缩进的深度）以及大括号和括号应放在何处。这些问题通常导致冲突因为它们最终成为品味和风格的问题。</p><p>对于Java，有一个通用的样式指南（遗憾的是未针对Java的最新版本进行更新）。它的一些建议非常具体：</p><ul><li>左括号应在复合语句开始的行的末尾。右括号应从一行开始，并缩进复合语句的开头。</li></ul><p>​         在6.031中，我们没有这种官方的样式指南。我们不会告诉您将花括号放在哪里。这是每个程序员都应该做出的个人决定。但是，保持一致<em>很</em>重要，并且遵循您正在从事的项目的约定也<em>很</em>重要。如果您是重新格式化您触摸的每个模块以匹配您的个人风格的程序员，那么您的队友会恨您，这是正确的。成为团队合作者。</p><p>​        但是有一些规则非常明智，并且以比放置花括号更强的方式针对我们的三大属性。本阅读的其余部分讨论了其中一些规则，至少是在本课程中与此相关的那些规则，在该课程中，我们主要讨论的是编写基本Java。这些是您在对其他学生进行代码审查时以及在查看自己的代码以进行改进时应该开始寻找的一些东西。但是，请不要将其视为详尽的代码样式指南列表。在这个学期的过程中，我们将讨论更多的东西-规范，具有表示不变式的抽象数据类型，并发性和线程安全性-然后它们将成为代码审查的基础。</p><h2 id="失败的例子1"><a href="#失败的例子1" class="headerlink" title="失败的例子1"></a>失败的例子1</h2><p>程序员经常将不良代码描述为需要消除的“不良气味”。“规范卫生”是这个词的另一种说法。让我们从一些臭代码开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dayOfYear</span><span class="params">(<span class="keyword">int</span> month, <span class="keyword">int</span> dayOfMonth, <span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (month == <span class="number">2</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">31</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">3</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">59</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">4</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">90</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">5</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">6</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">7</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">8</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">9</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">10</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + <span class="number">30</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">11</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">12</span>) &#123;</span><br><span class="line">        dayOfMonth += <span class="number">31</span> + <span class="number">28</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span> + <span class="number">30</span> + <span class="number">31</span> + <span class="number">31</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dayOfMonth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来的几节和练习将在此代码示例中挑选特定的气味。</p><h2 id="不要重复自己"><a href="#不要重复自己" class="headerlink" title="不要重复自己"></a>不要重复自己</h2><p>​        代码重复会危害安全。如果您在两个地方都有相同或非常相似的代码，则根本的风险是两个副本中都存在一个错误，并且某些维护人员在一个地方而不是另一个地方修复了该错误。</p><p>​        避免重复，就像您避免不看而过马路一样。复制和粘贴是一种极具诱惑力的编程工具，每次使用它时，您都应该感到危险，脊椎破裂。您要复制的区块越长，风险就越大。</p><p>不要重复自己（简称DRY）已成为程序员的口头禅。</p><p>该<code>dayOfYear</code>示例充满了相同的代码。您如何将其干燥？</p><h2 id="需要评论"><a href="#需要评论" class="headerlink" title="需要评论"></a>需要评论</h2><p>​        关于评论的简短概述。优秀的软件开发人员会在自己的代码中编写注释，并明智地这样做。好的注释应该使代码更易于理解，更易于避免错误（因为已经记录了重要的假设），并且可以随时进行更改。</p><p>​        一种重要的注释是规范，该规范出现在方法上方或类上方，并记录该方法或类的行为。在Java中，通常将其写为Javadoc注释，这意味着它以-syntax开头，<code>/**</code>并包含<code>@</code>-syntax，例如<code>@param</code>and <code>@return</code>for方法。这是规格的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compute the hailstone sequence.</span></span><br><span class="line"><span class="comment"> * See http://en.wikipedia.org/wiki/Collatz_conjecture#Statement_of_the_problem</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n starting number of sequence; requires n &gt; 0.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the hailstone sequence starting at n and ending with 1.</span></span><br><span class="line"><span class="comment"> *         For example, hailstone(3)=[3,10,5,16,8,4,2,1].</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">hailstoneSequence</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        规格说明假设。我们已经多次提到规格，在以后的阅读中会有更多关于规格的内容。</p><p>​        另一个至关重要的评论是指定从其他地方复制或改编的一段代码的来源或来源。这对实践软件开发人员至关重要，当您修改在网络上找到的代码时，6.031协作策略求这样做。这是一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// read a web page into a string</span></span><br><span class="line"><span class="comment">// see http://stackoverflow.com/questions/4328711/read-url-to-string-in-few-lines-of-java-code</span></span><br><span class="line">String mitHomepage = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> URL(<span class="string">&quot;http://www.mit.edu&quot;</span>).openStream(), <span class="string">&quot;UTF-8&quot;</span>).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next();</span><br></pre></td></tr></table></figure><p>​        记录来源的原因之一是避免侵犯版权。Stack Overflow上的一小段代码片段通常是在公共领域中，但是从其他来源复制的代码可能是专有的，也可能被其他种类的开放源代码许可所覆盖，而这些许可证的使用范围更为严格。记录源代码的另一个原因是该代码可能会过时。自从首次提出答案以来，多年来，此代码所源自的Stack Overflow答案已有了长足的发展。</p><p>​        有些评论是不好的，没有必要。例如，将代码直接音译成英语并不能改善理解，因为您应该假定读者至少知道Java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (n != <span class="number">1</span>) &#123; <span class="comment">// test whether n is 1   (don&#x27;t write comments like this!)</span></span><br><span class="line">   ++i; <span class="comment">// increment i</span></span><br><span class="line">   l.add(n); <span class="comment">// add n to l</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是晦涩的代码应该给出注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendMessage(<span class="string">&quot;as you wish&quot;</span>); <span class="comment">// this basically says &quot;I love you&quot;</span></span><br></pre></td></tr></table></figure><p>该<code>dayOfYear</code>代码需要一些注释-您将它们放在哪里？例如，您将在哪里记录<code>month</code>从0到11还是从1到12的运行？</p><h2 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h2><ul><li><p>​    快速失败*意味着代码应尽早发现其错误。发现问题的时间越早（离问题的原因越近），查找和修复问题就越容易。正如我们在第一读中所看到的，静态检查比动态检查失败更快，动态检查比产生错误答案的失败更快，而错误答案可能会破坏后续的计算。</p><p>​    该<code>dayOfYear</code>函数不会很快失败-如果您以错误的顺序传递参数，它将悄悄地返回错误的答案。实际上，按照dayOfYear的设计方式，非美国人很有可能会以错误的顺序传递论点！它需要更多检查-静态检查或动态检查。</p></li></ul><h2 id="避免魔术数字"><a href="#避免魔术数字" class="headerlink" title="避免魔术数字"></a>避免魔术数字</h2><p>​        实际上，计算机科学家本身仅识别两个有效的常数：0、1或可能是2。（好吧，三个常数。）</p><p>所有其他常量称为魔术，因为它们似乎是凭空出现的，没有任何解释。</p><p>一种解释数字的方法是带有注释，但是更好的方法是将数字声明为具有良好清晰名称的命名常量。</p><p><code>dayOfYear</code> 充满了魔幻数字：</p><ul><li>第2，…，12个月的可读性比<code>FEBRUARY</code>…，<code>DECEMBER</code>。</li><li>如果月份30、31、28处于数组，列表或映射之类的数据结构中，则它们的可读性更高（并消除重复的代码）<code>MONTH_LENGTH[month]</code>。</li><li>神秘数字59和90是魔术数字的特别有害的例子。它们不仅没有注释和记录，而且实际上是程序员<em>手工计算</em>的结果。不要对您手动计算的常数进行硬编码。Java比您更擅长算术。像这样的显式计算<code>31 + 28</code>使这些神秘数字的来历更加清晰。 <code>MONTH_LENGTH[JANUARY] + MONTH_LENGTH[FEBRUARY]</code>会更加清晰。</li></ul><h4 id="阅读练习"><a href="#阅读练习" class="headerlink" title="阅读练习"></a>阅读练习</h4><p>避免魔术数字</p><p>当您假设时会发生什么</p><p>用名字代替数字</p><h2 id="每个变量一个目的"><a href="#每个变量一个目的" class="headerlink" title="每个变量一个目的"></a>每个变量一个目的</h2><p>​        在<code>dayOfYear</code>示例中，参数<code>dayOfMonth</code>被重用以计算一个非常不同的值-函数的返回值，而不是月份中的一天。</p><p>不要重用参数，也不要重用变量。变量并不是编程中的稀缺资源。自由地介绍它们，给它们起好名字，当您不再需要它们时就停止使用它们。如果曾经用来表示一件事的变量突然开始意味着几行以下的不同含义，则会使您的读者感到困惑。</p><p>​        这不仅是一个易于理解的问题，而且还是一个免于错误的安全性和随时可以更改的问题。</p><p>​        特别是方法参数，通常应保持不变。（这对于准备进行更改很重要-将来，该方法的其他部分可能想知道该方法的原始参数是什么，因此在计算时不要浪费它们。）使用<code>final</code>方法参数以及尽可能多的其他变量是一个好主意。该<code>final</code>关键字表示该变量不应该被重新分配，以及Java编译器将静态检查。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dayOfYear</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> month, <span class="keyword">final</span> <span class="keyword">int</span> dayOfMonth, <span class="keyword">final</span> <span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="失败的例子2"><a href="#失败的例子2" class="headerlink" title="失败的例子2"></a>失败的例子2</h2><p>中存在一个潜在的错误<code>dayOfYear</code>。它根本没有处理leap年。作为解决此问题的一部分，假设我们编写了一种leap年方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">leap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    String tmp = String.valueOf(y);</span><br><span class="line">    <span class="keyword">if</span> (tmp.charAt(<span class="number">2</span>) == <span class="string">&#x27;1&#x27;</span> || tmp.charAt(<span class="number">2</span>) == <span class="string">&#x27;3&#x27;</span> || tmp.charAt(<span class="number">2</span>) == <span class="number">5</span> || tmp.charAt(<span class="number">2</span>) == <span class="string">&#x27;7&#x27;</span> || tmp.charAt(<span class="number">2</span>) == <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.charAt(<span class="number">3</span>)==<span class="string">&#x27;2&#x27;</span>||tmp.charAt(<span class="number">3</span>)==<span class="string">&#x27;6&#x27;</span>) <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">/*R1*/</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">/*R2*/</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.charAt(<span class="number">2</span>) == <span class="string">&#x27;0&#x27;</span> &amp;&amp; tmp.charAt(<span class="number">3</span>) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">/*R3*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp.charAt(<span class="number">3</span>)==<span class="string">&#x27;0&#x27;</span>||tmp.charAt(<span class="number">3</span>)==<span class="string">&#x27;4&#x27;</span>||tmp.charAt(<span class="number">3</span>)==<span class="string">&#x27;8&#x27;</span>)<span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">/*R4*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">/*R5*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此代码中隐藏了哪些错误？我们已经讨论过哪些样式问题？</p><h2 id="使用好名字"><a href="#使用好名字" class="headerlink" title="使用好名字"></a>使用好名字</h2><p>​        好的方法和变量名很长且具有自我描述性。通常可以通过使代码本身更具可读性并使用描述方法和变量的更好的名称来完全避免注释。</p><p>例如，您可以重写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int tmp &#x3D; 86400;  &#x2F;&#x2F; tmp is the number of seconds in a day (don&#39;t do this!)</span><br></pre></td></tr></table></figure><p>作为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int secondsPerDay &#x3D; 86400;</span><br></pre></td></tr></table></figure><p>​        通常，像<code>tmp</code>，<code>temp</code>和这样的变量名<code>data</code>非常糟糕，是程序员极端懒惰的症状。每个局部变量都是临时变量，每个变量都是数据，因此这些名称通常毫无意义。最好使用更长的，更具描述性的名称，以便您的代码可以清晰地读取所有内容。</p><p>遵循语言的词汇命名约定。在Python中，类通常是大写的，变量是小写的，而words_are_separated_by_underscores。在Java中：</p><ul><li>MethodsAreNamedWithCamelCaseLikeThis</li><li>variablesAreAlsoCamelCase</li><li>CONSTANTS_ARE_IN_ALL_CAPS_WITH_UNDERSCORES</li><li>类别大写</li><li>包是小写的，并且用点分隔</li></ul><p>ALL_CAPS_WITH_UNDERSCORES用于<code>static final</code>常量。在方法内部声明的所有变量（包括变量）都<code>final</code>使用camelCaseNames。</p><p>​        方法名称通常是动词短语，例如<code>getDate</code>或<code>isUpperCase</code>，而变量和类名称通常是名词短语。选择简短的单词，并且要简洁，但要避免缩写。例如，<code>message</code>比清楚<code>msg</code>，并且<code>word</code>比更好<code>wd</code>。请记住，您在课堂上和现实世界中的许多队友都不是说英语的人，对于非母语人士来说，缩写甚至更难。</p><p>​        完全避免使用单字符变量名，除非约定容易理解它们。例如，<code>x</code>和<code>y</code>对笛卡尔坐标意义，并<code>i</code>和<code>j</code>在整型变量<code>for</code>循环。但是，如果你的代码是充满变量一样<code>e</code>，<code>f</code>，<code>g</code>，和<code>h</code>，因为你只是从字母接他们，那么这将是令人难以置信的难读。</p><p>​        该<code>leap</code>方法具有错误的名称：方法名称本身和局部变量名称。你会怎么称呼他们呢？</p><h2 id="使用空格帮助读者"><a href="#使用空格帮助读者" class="headerlink" title="使用空格帮助读者"></a>使用空格帮助读者</h2><p>​        使用一致的缩进。这个<code>leap</code>例子很不好。这个<code>dayOfYear</code>例子要好得多。实际上，<code>dayOfYear</code>很好地将所有数字排列在列中，使读者可以轻松比较和检查它们。那是对空格的一种很好的使用。</p><p>​        在代码行中放置空格以使其易于阅读。飞跃示例中的某些行打包在一起-放在一些空格中。</p><p>​        切勿使用制表符来缩进，只能使用空格字符。请注意，我们说的是<em>字符</em>，而不是键。我们并不是说您永远不要按Tab键，只是说您的编辑器绝不应该在响应您按Tab键的情况下将Tab字符放入您的源文件中。此规则的原因是不同的工具对制表符的处理方式有所不同-有时将其扩展为4个空格，有时扩展为2个空格，有时扩展为8个空格。如果在命令行上运行“ git diff”，或者在以下位置查看源代码如果使用其他编辑器，则缩进可能会完全搞砸。只需使用空格。当您按Tab键时，请始终将编程编辑器设置为插入空格字符。</p><h2 id="失败的例子3"><a href="#失败的例子3" class="headerlink" title="失败的例子3"></a>失败的例子3</h2><p>​        这是臭代码的第三个示例，将说明此阅读的其余要点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> LONG_WORD_LENGTH = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String longestWord;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countLongWords</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">   longestWord = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="keyword">for</span> (String word: words) &#123;</span><br><span class="line">       <span class="keyword">if</span> (word.length() &gt; LONG_WORD_LENGTH) ++n;</span><br><span class="line">       <span class="keyword">if</span> (word.length() &gt; longestWord.length()) longestWord = word;</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不要使用全局变量"><a href="#不要使用全局变量" class="headerlink" title="不要使用全局变量"></a>不要使用全局变量</h2><p>​        避免使用全局变量。让我们分解一下我们所说的<em>全局变量</em>。全局变量是：</p><ul><li>一个<em>变量</em>，其含义的名称可以更改</li><li>在程序中的任何地方都是<em>全局的</em>，可访问的和可更改的。</li></ul><p>为什么全局变量不好，[缓存版本很好地列出了全局变量的危险。</p><p>在Java中，声明了全局变量<code>public static</code>。该<code>public</code>修改使得您随时随地访问，并<code>static</code>表示存在变数的一个实例。</p><p>通常，将全局变量更改为参数并返回值，或者将它们放在要调用方法的对象中。在以后的阅读中，我们将看到许多用于执行此操作的技术。</p><h2 id="方法应返回结果，而不是打印结果"><a href="#方法应返回结果，而不是打印结果" class="headerlink" title="方法应返回结果，而不是打印结果"></a>方法应返回结果，而不是打印结果</h2><p><code>        countLongWords</code>还没有准备好进行更改。它将一些结果发送到控制台<code>System.out</code>。这意味着，如果您想在另一个环境中使用它（该数字是出于其他目的（例如计算而不是人眼）的需要），则必须将其重写。</p><p>通常，只有程序的最高级部分才应与人类用户或控制台进行交互。下层部件应将其输入作为参数，并返回其输出作为结果。唯一的例外是调试输出，当然可以将其输出到控制台。但是这种输出不应该是设计的一部分，而应该是调试设计的一部分。</p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>​        代码审查是一种广泛使用的技术，可以通过人工检查来提高软件质量。代码审查可以检测代码中的许多类型的问题，但作为入门，此阅读内容讨论了好的代码的这些一般原则：</p><ul><li>不要重复自己（干）</li><li>需要评论</li><li>快速失败</li><li>避免魔术数字</li><li>每个变量一个目的</li><li>使用好名字</li><li>没有全局变量</li><li>返回结果，不打印</li><li>使用空格以提高可读性</li></ul><p>今天的阅读主题与我们的优质软件的三个关键属性有关，如下所示：</p><ul><li><strong>安全的错误。</strong> 通常，代码审查使用人工审查员来发现错误。通过DRY代码，您可以仅在一个位置修复错误，而不必担心该错误已传播到其他地方。注释您的假设显然可以减少其他程序员引入错误的可能性。快速失败原理会尽早检测到错误。避免使用全局变量可以更轻松地定位与变量值相关的错误，因为非全局变量只能在代码中的有限位置进行更改。</li><li><strong>容易明白。</strong> 代码审查实际上是找到晦涩或令人困惑的代码的唯一方法，因为其他人正在阅读并试图理解它。使用明智的注释，避免使用幻数，为每个变量保留一个目的，使用好名字以及很好地使用空格都可以提高代码的可理解性。</li><li><strong>准备好进行更改。</strong> 当经验丰富的软件开发人员完成代码审查时，代码审查将为您提供帮助，他们可以预见可能发生的变化并提出防范措施。DRY代码更易于更改，因为更改只需要在一个地方进行即可。返回结果而不是打印结果，可以更轻松地使代码适应新的目的。</li></ul><hr><h2 id="记住练习"><a href="#记住练习" class="headerlink" title="记住练习"></a>记住练习</h2>]]></content>
    
    
    <summary type="html">大多数公司和大型项目都有编码样式标准（例如Google Java Style这些可以变得非常详细，甚至可以指定空格（缩进的深度）以及大括号和括号应放在何处。这些问题通常导致冲突因为它们最终成为品味和风格的问题。</summary>
    
    
    
    <category term="设计模式" scheme="https://www.lianghuan.zone/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="Java后端" scheme="https://www.lianghuan.zone/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
    <category term="设计模式" scheme="https://www.lianghuan.zone/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch安装及集群配置</title>
    <link href="https://www.lianghuan.zone/2021/04/25/ElasticSearch%E5%AE%89%E8%A3%85%E5%8F%8A%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.lianghuan.zone/2021/04/25/ElasticSearch%E5%AE%89%E8%A3%85%E5%8F%8A%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</id>
    <published>2021-04-25T08:46:33.000Z</published>
    <updated>2021-04-25T15:50:26.914Z</updated>
    
    <content type="html"><![CDATA[<p>Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。<br>特点：</p><ul><li>分布式的实时文件存储，每个字段都被索引并可被搜索</li><li>分布式的实时分析搜索引擎–做不规则查询</li><li>可以扩展到上百台服务器，处理PB级结构化或非结构化数据<br>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</li></ul><p><strong>准备工作</strong><br>安装Centos7、建议内存2G以上、安装java1.8环境<br>配置文件：elasticsearch.yml(集群配置文件)、jvm.options(jvm配置文件)</p><p>1、添加用户</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# adduser es</span><br><span class="line">[root@localhost ~]# passwd es</span><br></pre></td></tr></table></figure><p>==为es用户授予权限==</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# whereis sudoers</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ls -l /etc/sudoers</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vi /etc/sudoers</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Allow root to run any commands anywher  </span><br><span class="line">root    ALL=(ALL)       ALL  </span><br><span class="line">es  ALL=(ALL)       ALL  #这个是新增的用户</span><br></pre></td></tr></table></figure><p>在保存退出时遇到如下提示是因为这个文件只有可读权限造成的可以通过：==：wq==强制保存退出<br><img src="https://img-blog.csdnimg.cn/20200425170419359.png" alt="在这里插入图片描述"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# chmod -v u-w /etc/sudoers</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# su es</span><br></pre></td></tr></table></figure><p>2、Java环境安装<br>解压安装包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jdk1.8]# tar -zxvf jdk-8u171-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>设置Java环境变量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jdk1.8.0_171]# vi /etc/profile</span><br></pre></td></tr></table></figure><p>在文件最后添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/elk1/jdk1<span class="number">.8</span>/jdk1<span class="number">.8</span><span class="number">.0_171</span></span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/LIB:$JRE_HOME/LIB:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">[root@localhost jdk1.8.0_171]# source /etc/profile</span><br><span class="line">[root@localhost jdk1.8.0_171]# java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_171&quot;</span></span><br><span class="line">Java(TM) <span class="function">SE Runtime <span class="title">Environment</span> <span class="params">(build <span class="number">1.8</span><span class="number">.0_171</span>-b11)</span></span></span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(build <span class="number">25.171</span>-b11, mixed mode)</span></span></span><br></pre></td></tr></table></figure><p><strong>ElasticSerach单机安装</strong><br>上传elasticsearch安装包到如下目录并解压<br>/home/elk/soft</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost elasticserach]# tar -zxvf elasticsearch-6.3.1.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost elasticserach]# cd elasticsearch-6.3.1/bin</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# ./elasticsearch</span><br></pre></td></tr></table></figure><p>启动错误1：<br><img src="https://img-blog.csdnimg.cn/20200425163930871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">错误原因：elasticsearch不能以root用户身份启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# su es</span><br><span class="line">[es<span class="meta">@localhost</span> bin]$ ./elasticsearch</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动错误2：<br><img src="https://img-blog.csdnimg.cn/20200425164136680.png" alt="在这里插入图片描述">错误原因：需要在配置文件jvm.options中设置es可使用jvm内存相关参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[es<span class="meta">@localhost</span> bin]$ cd /opt/es/elasticsearch-<span class="number">6.3</span><span class="number">.1</span>/conf</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[es<span class="meta">@localhost</span> bin]$ vim jvm.options</span><br></pre></td></tr></table></figure><p>根据服务器内存对应设置大小，如果服务器内存不够就会报错（这里我们只做实验操作设定为256m）<br><img src="https://img-blog.csdnimg.cn/20200425164745842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>启动错误3：<img src="https://img-blog.csdnimg.cn/20200425172254486.png" alt="在这里插入图片描述">错误原因：使用非root用户启动ES，而该用户的文件权限不足而被拒绝执行。<br>解决方法：给es用户elasticsearch目录的授权</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  chown -R 用户名 文件（目录）名</span></span><br><span class="line">chown -R es /opt/es/elasticsearch-<span class="number">6.3</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425172653803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">启动elasticsearch<br><img src="https://img-blog.csdnimg.cn/20200425173739717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">节点sonofelice上的磁盘空间使用率超过了85%，空闲15.2gb，占总磁盘空间的13.4%。将不会在该节点上分配副本了。<br>虽然不影响es的正常功能使用，如果不想打印：<br>第一种方式，是简单粗暴的在elasticsearch.yml文件中直接加入下面一行命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.routing.allocation.disk.threshold_enabled: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>第二种方式，则是自己控制磁盘空间使用率超过多少的时候不再分配副本。默认是85%，所以才会有上面的日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cluster.routing.allocation.disk.threshold_enabled: <span class="keyword">true</span></span><br><span class="line">cluster.routing.allocation.disk.watermark.low: 30gb</span><br><span class="line">cluster.routing.allocation.disk.watermark.high: 20gb</span><br></pre></td></tr></table></figure><p>接下来需要在elasticsearch.yml中配置es的host地址(配置成本机地址，允许访问)<br><img src="https://img-blog.csdnimg.cn/20200425174516271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">配置完之后重新启动elasticsearch<br><img src="https://img-blog.csdnimg.cn/20200425174942709.png" alt="在这里插入图片描述">启动错误4：<br><img src="https://img-blog.csdnimg.cn/20200425175050460.png" alt="在这里插入图片描述">意思是linux能用的最大线程数、最大文件数、最大内存数都不够 。<br>解决方法：修改linux配置文件（配合es的启动）<br>第一步：切换到root用户修改linux的limit配置文件，设置内存线程和文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nofile - 打开文件的最大数目</span><br><span class="line">noproc - 进程的最大数目</span><br><span class="line">soft 指的是当前系统生效的设置值</span><br><span class="line">hard 表明系统中所能设定的最大值</span><br><span class="line">在#End of file之前添加</span><br><span class="line">* hard nofile <span class="number">655360</span></span><br><span class="line">* soft nofile <span class="number">131072</span></span><br><span class="line">* hard nproc <span class="number">4096</span></span><br><span class="line">* soft nproc <span class="number">2048</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425180509792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第二步：修改linux的sysctl配置文件，配置系统使用内存</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.max_map_count=<span class="number">655360</span></span><br><span class="line">fs.file-max=<span class="number">655360</span></span><br><span class="line">vm.max_map_count=<span class="number">655360</span>，因此缺省配置下，单个jvm能开启的最大线程数为其一半</span><br><span class="line">file-max是设置 系统所有进程一共可以打开的文件数量 </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425180814943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">修改完之后不要忘记执行：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# sysctl -p</span><br></pre></td></tr></table></figure><p>最后切换为es用户启动：<br><img src="https://img-blog.csdnimg.cn/20200425181134247.png" alt="在这里插入图片描述">浏览器访问成功：</p><p><img src="https://img-blog.csdnimg.cn/20200425182014461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">也可以使用下面的命令启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./elasticsearch &amp;</span><br></pre></td></tr></table></figure><p>代表控制台将日志收集到.out文件，程序启动后还可以回到命令行继续操作。<br><strong>安装kibana可视化分析elasticsearch:</strong></p><p>上传kibana安装包并解压安装包:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost es]# tar -xzvf kibana-6.3.1-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>配置配置文件:文件安装目录/conf/kibana.yml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost config]# vim kibana.yml</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425215521378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">将上面的localhost也做修改<br><img src="https://img-blog.csdnimg.cn/20200425220648733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>启动kibana：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# nohup ./kibana &amp;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200425221353576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">通过浏览器访问成功：<br><img src="https://img-blog.csdnimg.cn/20200425221550906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>安装中英文分词器插件到elasticsearch:</strong><br>直接将分词器插件上传到elasticsearch下面的pugins文件夹内，然后重新启动elasticsearch和kibana<br><img src="https://img-blog.csdnimg.cn/20200425231810157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>IK提供了两个分词算法ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word为最细粒度划分<br>（1）最小切分：</p><p><img src="https://img-blog.csdnimg.cn/20200425232422480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>（2）最细切分：<br><img src="https://img-blog.csdnimg.cn/20200425232530674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>elasticsearch集群配置:</strong><br>在生产环境中必需对elasticsearch做集群，只需要在每一台服务器中的es中修改配置文件，es会在集群服务器中选取master结点服务器：<br>修改配置文件elasticserach.yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /elasticsearch.yml</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: aubin-cluster     #必须相同 </span><br><span class="line"># 集群名称（不能重复）</span><br><span class="line">node.name: els1（必须不同）</span><br><span class="line"># 节点名称，仅仅是描述名称，用于在日志中区分（自定义）</span><br><span class="line">#指定了该节点可能成为 master 节点，还可以是数据节点</span><br><span class="line">node.master: <span class="keyword">true</span></span><br><span class="line">node.data: <span class="keyword">true</span></span><br><span class="line">path.data: /opt/data</span><br><span class="line"># 数据的默认存放路径（自定义）</span><br><span class="line">path.logs: /opt/logs </span><br><span class="line"># 日志的默认存放路径 </span><br><span class="line">network.host: <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> </span><br><span class="line"># 当前节点的IP地址 </span><br><span class="line">http.port: <span class="number">9200</span> </span><br><span class="line"># 对外提供服务的端口</span><br><span class="line">transport.tcp.port: <span class="number">9300</span></span><br><span class="line">#9300为集群服务的端口 </span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">&quot;172.18.68.11&quot;</span>, <span class="string">&quot;172.18.68.12&quot;</span>,<span class="string">&quot;172.18.68.13&quot;</span>] </span><br><span class="line"># 集群个节点IP地址，也可以使用域名，需要各节点能够解析 </span><br><span class="line">discovery.zen.minimum_master_nodes: <span class="number">2</span> </span><br><span class="line"># 为了避免脑裂，主集群节点数最少为 半数+1</span><br></pre></td></tr></table></figure><p>==冒号后面必须有一个空格==<br>可以使用集群管理工具cerebro对集群进行管理：</p><p>开启后可在localhost：9000端口访问<br><img src="https://img-blog.csdnimg.cn/20200426100330580.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200426100628456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70" alt="![在这里插入图片描述](https://img-blog.csdnimg.cn/20200426100452331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70"></p>]]></content>
    
    
    <summary type="html">Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域，Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。</summary>
    
    
    
    <category term="大数据开发" scheme="https://www.lianghuan.zone/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java后端" scheme="https://www.lianghuan.zone/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Linux" scheme="https://www.lianghuan.zone/tags/Linux/"/>
    
    <category term="大数据开发" scheme="https://www.lianghuan.zone/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Akka并发编程模型及网络编程</title>
    <link href="https://www.lianghuan.zone/2021/04/24/Akka%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.lianghuan.zone/2021/04/24/Akka%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2021-04-24T12:38:49.000Z</published>
    <updated>2021-04-24T13:56:09.886Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-并发编程模型："><a href="#一、-并发编程模型：" class="headerlink" title="一、 并发编程模型："></a>一、 并发编程模型：</h3><p>Akka 的介绍:<br><img src="https://img-blog.csdnimg.cn/20200924185648776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="1-1、-Actor-模型用于解决什么问题"><a href="#1-1、-Actor-模型用于解决什么问题" class="headerlink" title="1.1、 Actor 模型用于解决什么问题"></a>1.1、 Actor 模型用于解决什么问题</h4><p><img src="https://img-blog.csdnimg.cn/2020092418575333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="1-2、-Akka-中-Actor-模型详解"><a href="#1-2、-Akka-中-Actor-模型详解" class="headerlink" title="1.2、 Akka 中 Actor 模型详解"></a>1.2、 Akka 中 Actor 模型详解</h4><p><img src="https://img-blog.csdnimg.cn/20200924185835260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>对上图的详解如下：</p><p><img src="https://img-blog.csdnimg.cn/20200924185850689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="1-3、Actor-模型工作机制说明"><a href="#1-3、Actor-模型工作机制说明" class="headerlink" title="1.3、Actor 模型工作机制说明"></a>1.3、Actor 模型工作机制说明</h4><p><img src="https://img-blog.csdnimg.cn/20200924185927538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Actor模型工作机制说明(对照工作机制示意图理解)：</p><p><img src="https://img-blog.csdnimg.cn/20200924185948593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>Actor 间传递消息机制(对照工作机制示意图理解):</p><p><img src="https://img-blog.csdnimg.cn/20200924190006223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="Actor-模型应用实例"><a href="#Actor-模型应用实例" class="headerlink" title="Actor 模型应用实例"></a>Actor 模型应用实例</h5><p>  Actor 自我通讯<br><img src="https://img-blog.csdnimg.cn/20200924190119212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2020092419060468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>构建maven项目pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.akka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SayHelloActor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一下常量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.8<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scala.compat.version</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">scala.compat.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">akka.version</span>&gt;</span>2.4.17<span class="tag">&lt;/<span class="name">akka.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加scala的依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;scala.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 添加akka的actor依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>akka-actor_$&#123;scala.compat.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;akka.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 多进程之间的Actor通信 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.typesafe.akka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>akka-remote_$&#123;scala.compat.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;akka.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定源码包和测试包的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/main/scala<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>src/test/scala<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定编译scala的插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-dependencyfile<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">arg</span>&gt;</span>$&#123;project.build.directory&#125;/.scala_dependencies<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- maven打包的插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                &lt;transformer</span><br><span class="line">                                        implementation=&quot;org.apache.maven.plugins.shade.resource.AppendingTransformer&quot;&gt;</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span>reference.conf<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!-- 指定main方法 --&gt;</span></span><br><span class="line">                                &lt;transformer</span><br><span class="line">                                        implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.actor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorRef</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 当我们继承 Actor 后，就是一个 Actor，需要重写该 Actor 的核心方法 receive</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SayHelloActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 循环的接收消息</span></span><br><span class="line">  <span class="comment">// 1. receive方法，会被该 Actor 的 MailBox(实现了 Runnable 接口)调用</span></span><br><span class="line">  <span class="comment">// 2. 当该 Actor 的 MailBox 接收到消息，就会调用 receive 方法</span></span><br><span class="line">  <span class="comment">// 3. Receive 的底层：type Receive = PartialFunction[Any, Unit]</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="comment">// 接受消息并处理，如果接收到 exit，就退出</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;hello&quot;</span> =&gt; println(<span class="string">&quot;发送：hello\t\t回应：hello too:)&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;ok&quot;</span> =&gt; println(<span class="string">&quot;发送：ok\t\t\t回应：ok too:)&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;exit&quot;</span> =&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;接收到exit~指令，退出系统...&quot;</span>)</span><br><span class="line">      context.stop(self) <span class="comment">// 停止自己的 ActorRef</span></span><br><span class="line">      context.system.terminate() <span class="comment">// 关闭 ActorSystem</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SayHelloActor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 先创建一个 ActorSystem，专门用于创建 Actor</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> actoryFactory = <span class="type">ActorSystem</span>(<span class="string">&quot;actoryFactory&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 创建一个 Actor 的同时，返回 Actor 的 ActorRef</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> sayHelloActorRef: <span class="type">ActorRef</span> = actoryFactory.actorOf(<span class="type">Props</span>[<span class="type">SayHelloActor</span>], <span class="string">&quot;sayHelloActor&quot;</span>)</span><br><span class="line">  <span class="comment">// (1) Props[SayHelloActor] 创建了一个 SayHelloActor 实例，这里使用到了反射</span></span><br><span class="line">  <span class="comment">// (2) &quot;sayHelloActor&quot; 是 Actor 的名字</span></span><br><span class="line">  <span class="comment">// (3) sayHelloActorRef: ActorRef  =&gt;是 Props[SayHelloActor] 的引用</span></span><br><span class="line">  <span class="comment">// (4) 创建的 SayHelloActor 实例被 ActorSystme 接管</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 给 SayHelloActor 发消息(邮箱)</span></span><br><span class="line">    sayHelloActorRef ! <span class="string">&quot;hello&quot;</span></span><br><span class="line">    sayHelloActorRef ! <span class="string">&quot;ok&quot;</span></span><br><span class="line">    sayHelloActorRef ! <span class="string">&quot;ok~&quot;</span></span><br><span class="line">    <span class="comment">// 研究异步如何退出 ActorSystem</span></span><br><span class="line">    sayHelloActorRef ! <span class="string">&quot;exit&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="https://img-blog.csdnimg.cn/20200924190547363.png#pic_center" alt="在这里插入图片描述"><br>小结：<br>当程序执行 private val sayHelloActorRef: ActorRef = actoryFactory.actorOf(Props[SayHelloActor], “sayHelloActor”) 会完成如下任务：</p><pre><code>1、actorFactory 是 ActorSystem(“actorFactory”) 创建的。2、这里的 Props[SayHelloActor] 会使用反射机制，创建一个 SayHelloActor 对象，如果是 actorFactory.actorOf(Props(new SayHelloActor(其他代理对象的引用)), “sayHelloActor”) 形式，就是使用 new 的方式创建一个 SayHelloActor 对象。注意：Props() 是小括号。3、会创建一个 SayHelloActor 对象的代理对象 sayHelloActorRef，使用 sayHelloActorRef 才能发送消息。4、会在底层创建 Dispather Message，是一个线程池，用于分发消息，消息是发送到对应的 Actor 的 MailBox。5、会在底层创建 SayHelloActor 的 MailBox 对象，该对象是一个队列，可接收 Dispatcher Message 发送的消息。6、MailBox 实现了 Runnable 接口，是一个线程，一直运行并调用 Actor 的 receive 方法，因此当Dispather 发送消息到 MailBox 时，Actor 在r eceive 方法就可以得到信息。7、SayHelloActorRef ! “hello” ，表示把 hello 消息发送到 SayHello Actor 的 Mailbox （通过Dispatcher Message 转发）。</code></pre><p>Actor 之间通讯：<br><img src="https://img-blog.csdnimg.cn/20200924190729535.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200924190747738.png#pic_center" alt="在这里插入图片描述">两个 Actor 的通讯机制原理图<br><img src="https://img-blog.csdnimg.cn/20200924190805995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">代码实现：<br>AActor.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.actors</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorRef</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AActor</span>(<span class="params">bActorRef: <span class="type">ActorRef</span></span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;AActor 出招了，start ok&quot;</span>)</span><br><span class="line">      bActorRef ! <span class="string">&quot;我打&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;我打&quot;</span> =&gt; &#123;</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">      <span class="comment">// 给 BActor 发出消息</span></span><br><span class="line">      <span class="comment">// 这里需要持有 BActor 的引用(BActorRef)才可以</span></span><br><span class="line">      println(<span class="string">s&quot;AActor(黄飞鸿) 厉害！看我佛山无影脚 第<span class="subst">$&#123;count&#125;</span>脚&quot;</span>)</span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">1000</span>)</span><br><span class="line">      bActorRef ! <span class="string">&quot;我打&quot;</span> <span class="comment">// 给 BActor 发出消息</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BActor.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.actors</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.<span class="type">Actor</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;我打&quot;</span> =&gt; &#123;</span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line">      println(<span class="string">s&quot;BActor(乔峰) 挺猛 看我降龙十八掌 第<span class="subst">$&#123;count&#125;</span>掌&quot;</span>)</span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">1000</span>)</span><br><span class="line">      <span class="comment">// 通过 sender() 方法，可以获取到发送消息的 Actor 的 ActorRef</span></span><br><span class="line">      sender() ! <span class="string">&quot;我打&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ActorApp.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.actors</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">ActorRef</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100招后，就退出</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ActorApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建 ActorSystem</span></span><br><span class="line">  <span class="keyword">val</span> actorfactory = <span class="type">ActorSystem</span>(<span class="string">&quot;actorfactory&quot;</span>)</span><br><span class="line">  <span class="comment">// 先创建 BActor 的引用/代理</span></span><br><span class="line">  <span class="keyword">val</span> bActorRef: <span class="type">ActorRef</span> = actorfactory.actorOf(<span class="type">Props</span>[<span class="type">BActor</span>], <span class="string">&quot;bActor&quot;</span>)</span><br><span class="line">  <span class="comment">// 创建 AActor 的引用时需要持有 BActor 的引用</span></span><br><span class="line">  <span class="keyword">val</span> aActorRef: <span class="type">ActorRef</span> = actorfactory.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">AActor</span>(bActorRef)), <span class="string">&quot;aActor&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// aActor 先出招</span></span><br><span class="line">  aActorRef ! <span class="string">&quot;start&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码的小结:</p><pre><code>1、两个 Actor 通讯机制和 Actor 自身发消息机制基本一样，只是要注意如下：2、如果 A Actor 在需要给 B Actor 发消息，则需要持有 B Actor 的 ActorRef，可以通过创建 A Actor 时，传入 B Actor 的代理对象(ActorRef)。3、当 B Actor 在 receive 方法中接收到消息，需要回复时，可以通过 sender() 获取到发送 Actor 的代理对象。</code></pre><p>如何理解 Actor 的 receive 方法被调用？</p><pre><code>1、每个 Actor 对应 MailBox。2、MailBox 实现了 Runnable 接口，处于运行的状态。3、当有消息到达 MailBox，就会去调用 Actor 的 receive 方法，即将消息推送给 receive 方法。</code></pre><h3 id="二、Akka-网络编程："><a href="#二、Akka-网络编程：" class="headerlink" title="二、Akka 网络编程："></a>二、Akka 网络编程：</h3><p>Akka 网络编程基本介绍：</p><p><img src="https://img-blog.csdnimg.cn/20200924191339778.png#pic_center" alt="在这里插入图片描述"></p><h4 id="2-1、Akka-网络编程-小黄鸡客服案例"><a href="#2-1、Akka-网络编程-小黄鸡客服案例" class="headerlink" title="2.1、Akka 网络编程-小黄鸡客服案例"></a>2.1、Akka 网络编程-小黄鸡客服案例</h4><p>需求分析<br>  1、服务端进行监听(9999)<br>  2、客户端可以通过键盘输入，发送咨询问题给小黄鸡客服(服务端)<br>  3、小黄鸡(服务端)回答客户的问题<br><img src="https://img-blog.csdnimg.cn/20200924191452156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>示例代码如下：<br>YellowChickenServer.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.yellowchicken.server</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorRef</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.akka.yellowchicken.common.&#123;<span class="type">ClientMessage</span>, <span class="type">ServerMessage</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.<span class="type">ConfigFactory</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YellowChickenServer</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; println(<span class="string">&quot;start 小黄鸡客服开始工作了...&quot;</span>)</span><br><span class="line">    <span class="comment">// 如果接收到了服务端的发来的消息，即 ClientMessage</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">ClientMessage</span>(mes) =&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;客户咨询的问题是：&quot;</span> + mes)</span><br><span class="line">      mes <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 match case 匹配（模糊匹配）</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;价格&quot;</span> =&gt; sender() ! <span class="type">ServerMessage</span>(<span class="string">&quot;20000 RMB&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;地址&quot;</span> =&gt; sender() ! <span class="type">ServerMessage</span>(<span class="string">&quot;北京市&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;技术&quot;</span> =&gt; sender() ! <span class="type">ServerMessage</span>(<span class="string">&quot;大数据&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; sender() ! <span class="type">ServerMessage</span>(<span class="string">&quot;你说的啥子:)&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序入口</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">YellowChickenServerApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> host = <span class="string">&quot;127.0.0.1&quot;</span> <span class="comment">// 服务端ip地址</span></span><br><span class="line">  <span class="keyword">val</span> port = <span class="number">9999</span> <span class="comment">// 端口</span></span><br><span class="line">  <span class="comment">// 创建 config 对象，指定协议类型、监听的ip和端口</span></span><br><span class="line">  <span class="keyword">val</span> config = <span class="type">ConfigFactory</span>.parseString(</span><br><span class="line">    <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       |akka.actor.provider=&quot;</span>akka.remote.<span class="type">RemoteActorRefProvider</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       |akka.remote.netty.tcp.hostname=$host</span></span><br><span class="line"><span class="string">       |akka.remote.netty.tcp.port=$port</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">  <span class="comment">// 创建 ActorSystem</span></span><br><span class="line">  <span class="keyword">val</span> serverActorSystem = <span class="type">ActorSystem</span>(<span class="string">&quot;Server&quot;</span>, config)</span><br><span class="line">  <span class="comment">// 创建 YellowChickenServer 的 Actor 和 ActorRef</span></span><br><span class="line">  <span class="keyword">val</span> yellowChickenServerActorRef: <span class="type">ActorRef</span> = serverActorSystem.actorOf(<span class="type">Props</span>[<span class="type">YellowChickenServer</span>], <span class="string">&quot;YellowChickenServer-01&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动服务端</span></span><br><span class="line">  yellowChickenServerActorRef ! <span class="string">&quot;start&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>CustomerActor.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.yellowchicken.client</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorRef</span>, <span class="type">ActorSelection</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.test.akka.yellowchicken.common.&#123;<span class="type">ClientMessage</span>, <span class="type">ServerMessage</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.<span class="type">ConfigFactory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">StdIn</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerActor</span>(<span class="params">serverHost: <span class="type">String</span>, serverPort: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个 YellowChickenServerRef</span></span><br><span class="line">  <span class="keyword">var</span> serverActorRef: <span class="type">ActorSelection</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 Actor 中有一个方法 preStart 方法，它会在 Actor 运行前执行</span></span><br><span class="line">  <span class="comment">// 在 Akka 开发中，通常将初始化的工作，放在 preStart 方法中</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">preStart</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">this</span>.serverActorRef = context.actorSelection(<span class="string">s&quot;akka.tcp://Server@<span class="subst">$&#123;serverHost&#125;</span>:<span class="subst">$&#123;serverPort&#125;</span>/user/YellowChickenServer-01&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;this.serverActorRefer=&quot;</span> + <span class="keyword">this</span>.serverActorRef)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; println(<span class="string">&quot;start 客户端运行，可以咨询问题&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> mes: <span class="type">String</span> =&gt; &#123;</span><br><span class="line">      <span class="comment">// 发给服务端</span></span><br><span class="line">      <span class="comment">// serverActorRef ! mes // 不应该发送字符串，应该包装一把，应该发送一个(样例)对象（即协议）</span></span><br><span class="line">      serverActorRef ! <span class="type">ClientMessage</span>(mes) <span class="comment">// 此时发送的是一个对象，该样例类默认实现了序列化 和 apply 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果接受到了服务器端的消息</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">ServerMessage</span>(mes) =&gt; &#123;</span><br><span class="line">      println(<span class="string">s&quot;收到小黄鸡客服(Server)消息：<span class="subst">$mes</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序入口</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CustomerActorApp</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> (host, port, serverHost, serverPort) = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9990</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">  <span class="keyword">val</span> config = <span class="type">ConfigFactory</span>.parseString(</span><br><span class="line">    <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       |akka.actor.provider=&quot;</span>akka.remote.<span class="type">RemoteActorRefProvider</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">       |akka.remote.netty.tcp.hostname=$host</span></span><br><span class="line"><span class="string">       |akka.remote.netty.tcp.port=$port</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 ActorSystem</span></span><br><span class="line">  <span class="keyword">val</span> clientActorSystem = <span class="type">ActorSystem</span>(<span class="string">&quot;Client&quot;</span>, config)</span><br><span class="line">  <span class="comment">// 创建 CustomerActor 的 Actor 和 ActorRef</span></span><br><span class="line">  <span class="keyword">val</span> clientActorRef: <span class="type">ActorRef</span> = clientActorSystem.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">CustomerActor</span>(serverHost, serverPort)), <span class="string">&quot;CustomerActor-01&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动客户端</span></span><br><span class="line">  clientActorRef ! <span class="string">&quot;start&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 客户端发送消息</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> mes = <span class="type">StdIn</span>.readLine()</span><br><span class="line">    clientActorRef ! mes</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MessageProtocol.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.yellowchicken.common</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用样例类来构建协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、客户端发送服务端的协议（序列化对象）</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMessage</span>(<span class="params">mes: <span class="type">String</span></span>)  <span class="comment">// 回顾：样例类的构造器中的每一个参数都默认为 val ，即只可读。</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// 2、服务器端发送给客户端的协议</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">ServerMessage</span>(<span class="params">mes: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><h4 id="2-2、Akka-网络编程-Spark-Master-Worker-进程通讯项目"><a href="#2-2、Akka-网络编程-Spark-Master-Worker-进程通讯项目" class="headerlink" title="2.2、Akka 网络编程-Spark Master Worker 进程通讯项目"></a>2.2、Akka 网络编程-Spark Master Worker 进程通讯项目</h4><p>项目意义:<br>      1、深入理解 Spark 的 Master 和 Worker 的通讯机制。<br>  2、为了方便同学们看 Spark 的底层源码，命名的方式和源码保持一致(如：通讯消息类命名就是一样的)。<br>  3、加深对主从服务心跳检测机制(HeartBeat)的理解，方便以后 spark 源码二次开发。<br>  <br>项目需求分析:<br> <img src="https://img-blog.csdnimg.cn/20200924191753482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="2-2-1、实现功能-1-Worker-完成注册"><a href="#2-2-1、实现功能-1-Worker-完成注册" class="headerlink" title="2.2.1、实现功能 1-Worker 完成注册"></a>2.2.1、实现功能 1-Worker 完成注册</h5><p>功能要求: Worker 注册到 Master，Master 完成注册，并回复 Worker 注册成功。<br><img src="https://img-blog.csdnimg.cn/20200924191851779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>示例代码如下：<br>MasterActor.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.sparkmasterworker.master</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.test.akka.sparkmasterworker.common.&#123;<span class="type">RegisterWorkerInfo</span>, <span class="type">RegisteredWorkerInfo</span>, <span class="type">WorkerInfo</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.<span class="type">ConfigFactory</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MasterActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个 mutable.HashMap 属性，用于管理 Worker</span></span><br><span class="line">  <span class="keyword">val</span> workers = mutable.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">WorkerInfo</span>]()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; println(<span class="string">&quot;Master服务器启动了...&quot;</span>)</span><br><span class="line">    <span class="comment">// 接收到 Worker 客户端注册的信息，保存进 HashMap</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">RegisterWorkerInfo</span>(id, cpu, ram) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!workers.contains(id)) &#123;</span><br><span class="line">        <span class="comment">// 创建 WorkerInfo</span></span><br><span class="line">        <span class="keyword">val</span> workerInfo = <span class="keyword">new</span> <span class="type">WorkerInfo</span>(id, cpu, ram)</span><br><span class="line">        <span class="comment">// 加入到 HashMap</span></span><br><span class="line">        workers += (id -&gt; workerInfo)</span><br><span class="line">        println(<span class="string">&quot;服务器的Workers= &quot;</span> + workers)</span><br><span class="line">        <span class="comment">// 回复客户端注册成功</span></span><br><span class="line">        sender() ! <span class="type">RegisteredWorkerInfo</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MasterActorApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> host = <span class="string">&quot;127.0.0.1&quot;</span> <span class="comment">// 服务端ip地址</span></span><br><span class="line">    <span class="keyword">val</span> port = <span class="number">10005</span> <span class="comment">// 端口</span></span><br><span class="line">    <span class="comment">// 创建 config 对象，指定协议类型、监听的ip和端口</span></span><br><span class="line">    <span class="keyword">val</span> config = <span class="type">ConfigFactory</span>.parseString(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |akka.actor.provider=&quot;</span>akka.remote.<span class="type">RemoteActorRefProvider</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |akka.remote.netty.tcp.hostname=$host</span></span><br><span class="line"><span class="string">         |akka.remote.netty.tcp.port=$port</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line">    <span class="comment">// 先创建 ActorSystem</span></span><br><span class="line">    <span class="keyword">val</span> masterActorSystem = <span class="type">ActorSystem</span>(<span class="string">&quot;Master&quot;</span>, config)</span><br><span class="line">    <span class="comment">// 再创建 Master 的 Actor 和 ActorRef</span></span><br><span class="line">    <span class="keyword">val</span> masterActorRef = masterActorSystem.actorOf(<span class="type">Props</span>[<span class="type">MasterActor</span>], <span class="string">&quot;MasterActor-01&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 Master</span></span><br><span class="line">    masterActorRef ! <span class="string">&quot;start&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WorkerActor.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.sparkmasterworker.worker</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorRef</span>, <span class="type">ActorSelection</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.akka.sparkmasterworker.common.&#123;<span class="type">RegisterWorkerInfo</span>, <span class="type">RegisteredWorkerInfo</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.<span class="type">ConfigFactory</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerActor</span>(<span class="params">serverHost: <span class="type">String</span>, serverPort: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个 MasterActorRef</span></span><br><span class="line">  <span class="keyword">var</span> masterActorProxy: <span class="type">ActorSelection</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义 Worker 的编号</span></span><br><span class="line">  <span class="keyword">var</span> id = java.util.<span class="type">UUID</span>.randomUUID().toString</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 Actor 中有一个方法 preStart 方法，它会在 Actor 运行前执行</span></span><br><span class="line">  <span class="comment">// 在 Akka 开发中，通常将初始化的工作，放在 preStart 方法中</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">preStart</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">this</span>.masterActorProxy = context.actorSelection(<span class="string">s&quot;akka.tcp://Master@<span class="subst">$&#123;serverHost&#125;</span>:<span class="subst">$&#123;serverPort&#125;</span>/user/MasterActor-01&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;this.masterActorProxy=&quot;</span> + <span class="keyword">this</span>.masterActorProxy)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span> </span>= &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;Worker客户端启动运行&quot;</span>)</span><br><span class="line">      <span class="comment">// 给服务器发送一个注册信息</span></span><br><span class="line">      masterActorProxy ! <span class="type">RegisterWorkerInfo</span>(id, <span class="number">16</span>, <span class="number">16</span> * <span class="number">1024</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">RegisteredWorkerInfo</span> =&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;WorkedId= &quot;</span> + id + <span class="string">&quot; 注册成功！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WorkerActorApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> (host, port, serverHost, serverPort) = (<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10001</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">10005</span>)</span><br><span class="line">    <span class="keyword">val</span> config = <span class="type">ConfigFactory</span>.parseString(</span><br><span class="line">      <span class="string">s&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |akka.actor.provider=&quot;</span>akka.remote.<span class="type">RemoteActorRefProvider</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">         |akka.remote.netty.tcp.hostname=$host</span></span><br><span class="line"><span class="string">         |akka.remote.netty.tcp.port=$port</span></span><br><span class="line"><span class="string">        &quot;</span><span class="string">&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 ActorSystem</span></span><br><span class="line">    <span class="keyword">val</span> workerActorSystem = <span class="type">ActorSystem</span>(<span class="string">&quot;Worker&quot;</span>, config)</span><br><span class="line">    <span class="comment">// 创建 WorkerActor 的 Actor 和 ActorRef</span></span><br><span class="line">    <span class="keyword">val</span> workerActorRef: <span class="type">ActorRef</span> = workerActorSystem.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">WorkerActor</span>(serverHost, serverPort)), <span class="string">&quot;WorkerActor-01&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动客户端</span></span><br><span class="line">    workerActorRef ! <span class="string">&quot;start&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MessageProtocol.scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.sparkmasterworker.common</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用样例类来构建协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker 注册信息</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterWorkerInfo</span>(<span class="params">id: <span class="type">String</span>, cpu: <span class="type">Int</span>, ram: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// 这个是 WorkerInfo，是保存在 Master 的 HashMap 中的，该 HashMap 用于管理 Worker</span></span></span><br><span class="line"><span class="class"><span class="comment">// 将来这个 WorkerInfo 会扩展，比如 增加 Worker 上一次的心跳时间</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">WorkerInfo</span>(<span class="params">val id: <span class="type">String</span>, val cpu: <span class="type">Int</span>, val ram: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// 当 Worker 注册成功，服务器返回一个 RegisteredWorkerInfo 对象</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">RegisteredWorkerInfo</span></span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><h5 id="2-2-2、实现功能-2-Worker-定时发送心跳"><a href="#2-2-2、实现功能-2-Worker-定时发送心跳" class="headerlink" title="2.2.2、实现功能 2-Worker 定时发送心跳"></a>2.2.2、实现功能 2-Worker 定时发送心跳</h5><p>功能要求：Worker 定时发送心跳给 Master，Master 能够接收到，并更新 Worker 上一次心跳时间。<br><img src="https://img-blog.csdnimg.cn/20200924191958665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>示例代码如下：<br>MessageProtocol.scala 中增加代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.akka.sparkmasterworker.common</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用样例类来构建协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker 注册信息</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterWorkerInfo</span>(<span class="params">id: <span class="type">String</span>, cpu: <span class="type">Int</span>, ram: <span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// 这个是 WorkerInfo，是保存在 Master 的 HashMap 中的，该 HashMap 用于管理 Worker</span></span></span><br><span class="line"><span class="class"><span class="comment">// 将来这个 WorkerInfo 会扩展，比如 增加 Worker 上一次的心跳时间</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">WorkerInfo</span>(<span class="params">val id: <span class="type">String</span>, val cpu: <span class="type">Int</span>, val ram: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 新增属性：心跳时间</span></span><br><span class="line">  <span class="keyword">var</span> lastHeartBeatTime: <span class="type">Long</span> = _</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 Worker 注册成功，服务器返回一个 RegisteredWorkerInfo 对象</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">RegisteredWorkerInfo</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// 每隔一定时间定时器发送给 Master 一个心跳</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">HeartBeat</span>(<span class="params">id: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// Worker 每隔一定时间定时器发送给 自己 一个消息</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">SendHeartBeat</span></span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>MasterActor.scala 中增加代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="type">HeartBeat</span>(id) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 更新对应的 Worker 的心跳时间</span></span><br><span class="line">  <span class="comment">// 1、先从 Worker 中取出 WorkerInfo</span></span><br><span class="line">  <span class="keyword">val</span> workerInfo = workers(id)</span><br><span class="line">  workerInfo.lastHeartBeatTime = <span class="type">System</span>.currentTimeMillis()</span><br><span class="line">  println(<span class="string">&quot;Master更新了 &quot;</span> + id + <span class="string">&quot; 的心跳时间 &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WorkerActor.scala 中增加代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 当客户端注册成功后，就定义一个定时器，每隔一定时间，发送 SendHeartBeat 给自己</span></span><br><span class="line">  <span class="keyword">import</span> context.dispatcher</span><br><span class="line">  context.system.scheduler.schedule(<span class="number">0</span> millis, <span class="number">3000</span> millis, self, <span class="type">SendHeartBeat</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">SendHeartBeat</span> =&gt; &#123;</span><br><span class="line">  println(<span class="string">&quot;WorkedId= &quot;</span> + id + <span class="string">&quot; 给Master发送心跳&quot;</span>)</span><br><span class="line">  masterActorProxy ! <span class="type">HeartBeat</span>(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-2-3、实现功能-3-Master-启动定时任务，定时检测注册的-Worker"><a href="#2-2-3、实现功能-3-Master-启动定时任务，定时检测注册的-Worker" class="headerlink" title="2.2.3、实现功能 3-Master 启动定时任务，定时检测注册的 Worker"></a>2.2.3、实现功能 3-Master 启动定时任务，定时检测注册的 Worker</h5><p>功能要求：Master 启动定时任务，定时检测注册的 Worker 有哪些没有更新心跳，已经超时的 Worker，将其从 HashMap 中删除掉。<br><img src="https://img-blog.csdnimg.cn/20200924192110425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE5MzM1OA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>示例代码如下：<br>MessageProtocol.scala 中增加代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Master 给自己发送一个触发检查超时 Worker 的信息</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">StartTimeOutWorker</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="comment">// Master 给自己发消息，检测 Worker，对于心跳超时的</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">object</span> <span class="title">RemoveTimeOutWorker</span></span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>MasterActor.scala 中增加代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt; &#123;</span><br><span class="line">  println(<span class="string">&quot;Master服务器启动了...&quot;</span>)</span><br><span class="line">  <span class="comment">// Master 启动定时任务，定时检测注册的 Worker 有哪些没有更新心跳，已经超时的 Worker，将其从 HashMap 中删除掉。</span></span><br><span class="line">  self ! <span class="type">StartTimeOutWorker</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启定时器，每隔一定时间检测是否有 Worker 的心跳超时</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">StartTimeOutWorker</span> =&gt; &#123;</span><br><span class="line">  println(<span class="string">&quot;开启了定时检测Worker心跳的任务&quot;</span>)</span><br><span class="line">  <span class="keyword">import</span> context.dispatcher <span class="comment">// 使用调度器时候必须导入dispatcher</span></span><br><span class="line">  context.system.scheduler.schedule(<span class="number">0</span> millis, <span class="number">9000</span> millis, self, <span class="type">RemoveTimeOutWorker</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断哪些 Worker 心跳超时（nowTime - lastHeartBeatTime），对已经超时的 Worker，将其从 HashMap 中删除掉。</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">RemoveTimeOutWorker</span> =&gt; &#123;</span><br><span class="line">  <span class="comment">// 首先获取所有 Workers 的所有 WorkerInfo</span></span><br><span class="line">  <span class="keyword">val</span> workerInfos = workers.values</span><br><span class="line">  <span class="keyword">val</span> nowTime = <span class="type">System</span>.currentTimeMillis()</span><br><span class="line">  <span class="comment">// 过滤出所有超时的 workerInfo 并删除即可</span></span><br><span class="line">  workerInfos.filter(workerInfo =&gt; (nowTime - workerInfo.lastHeartBeatTime) &gt; <span class="number">6000</span>)</span><br><span class="line">    .foreach(workerInfo =&gt; workers.remove(workerInfo.id))</span><br><span class="line">  println(<span class="string">&quot;当前有 &quot;</span> + workers.size + <span class="string">&quot; 个Worker存活&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-2-4、实现功能-4-Master-Worker-的启动参数运行时指定"><a href="#2-2-4、实现功能-4-Master-Worker-的启动参数运行时指定" class="headerlink" title="2.2.4、实现功能 4-Master,Worker 的启动参数运行时指定"></a>2.2.4、实现功能 4-Master,Worker 的启动参数运行时指定</h5><p>功能要求：Master，Worker 的启动参数运行时指定，而不是固定写在程序中的。</p><p>MasterActor.scala 中修改代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (args.length != <span class="number">3</span>) &#123;</span><br><span class="line">  println(<span class="string">&quot;请输入参数 host port MasterActor的名字&quot;</span>)</span><br><span class="line">  sys.exit()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> host = args(<span class="number">0</span>)  <span class="comment">// 服务端ip地址</span></span><br><span class="line"><span class="keyword">val</span> port = args(<span class="number">1</span>)  <span class="comment">// 端口</span></span><br><span class="line"><span class="keyword">val</span> masterName = args(<span class="number">2</span>)  <span class="comment">// MasterActor的名字</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">// 再创建 Master 的 Actor 和 ActorRef</span></span><br><span class="line"><span class="keyword">val</span> masterActorRef = masterActorSystem.actorOf(<span class="type">Props</span>[<span class="type">MasterActor</span>], <span class="string">s&quot;<span class="subst">$&#123;masterName&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>WorkerActor.scala 中增修改代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (args != <span class="number">6</span>) &#123;</span><br><span class="line">  println(<span class="string">&quot;请输入参数 host port WorkerActor的名字 serverHost serverPort MasterActor的名字&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> host = args(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">val</span> port = args(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">val</span> workerName = args(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> serverHost = args(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> serverPort = args(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> masterName = args(<span class="number">5</span>)</span><br><span class="line">......</span><br><span class="line"><span class="comment">// 创建 WorkerActor 的 Actor 和 ActorRef</span></span><br><span class="line"><span class="keyword">val</span> workerActorRef: <span class="type">ActorRef</span> = workerActorSystem.actorOf(<span class="type">Props</span>(<span class="keyword">new</span> <span class="type">WorkerActor</span>(serverHost, serverPort.toInt, masterName)), <span class="string">s&quot;<span class="subst">$&#123;workerName&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Akka是JAVA虚拟机平台上构建高并发、分布式和容错应用的工具包和运行时。Akka用Scala语言编写，同时提供了Scala和Java的开发接口。Akka处理并发的方法基于Actor模型，Actor之间通信的唯一机制就是消息传递。</summary>
    
    
    
    <category term="大数据开发" scheme="https://www.lianghuan.zone/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java后端" scheme="https://www.lianghuan.zone/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Scala编程" scheme="https://www.lianghuan.zone/tags/Scala%E7%BC%96%E7%A8%8B/"/>
    
    <category term="大数据" scheme="https://www.lianghuan.zone/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Canal数据同步工具</title>
    <link href="https://www.lianghuan.zone/2021/04/24/Canal%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7/"/>
    <id>https://www.lianghuan.zone/2021/04/24/Canal%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7/</id>
    <published>2021-04-24T08:46:33.000Z</published>
    <updated>2021-04-24T08:59:11.154Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、Canal介绍"><a href="#一、Canal介绍" class="headerlink" title="一、Canal介绍"></a>一、Canal介绍</h4><p><strong>1、应用场景</strong><br>在前面的统计分析功能中，我们采取了服务调用获取统计数据，这样耦合度高，效率相对较低，目前我采取另一种实现方式，通过实时同步数据库表的方式实现，例如我们要统计每天注册与登录人数，我们只需把会员表同步到统计库中，实现本地统计就可以了，这样效率更高，耦合度更低，Canal就是一个很好的数据库同步工具。canal是阿里巴巴旗下的一款开源项目，纯Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费，目前主要支持了MySQL。</p><p><strong>2、Canal环境搭建</strong></p><p>canal的原理是基于mysql binlog技术，所以这里一定需要开启mysql的binlog写入功能<br>开启mysql服务：  service mysql start<br>（1）检查binlog功能是否有开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&#x27;log_bin&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | OFF    |</span><br><span class="line">+---------------+-------+</span><br><span class="line"><span class="number">1</span> <span class="function">row in <span class="title">set</span> <span class="params">(<span class="number">0.00</span> sec)</span></span></span><br></pre></td></tr></table></figure><p>（2）如果显示状态为OFF表示该功能未开启，开启binlog功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>，修改 mysql 的配置文件 my.cnf</span><br><span class="line">vi /etc/my.cnf </span><br><span class="line">追加内容：</span><br><span class="line">log-bin=mysql-bin     #binlog文件名</span><br><span class="line">binlog_format=ROW     #选择row模式</span><br><span class="line">server_id=1           #mysql实例id,不能和canal的slaveId重复</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，重启 mysql：</span><br><span class="line">service mysql restart</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>，登录 mysql 客户端，查看 log_bin 变量</span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;log_bin&#x27;</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | ON|</span><br><span class="line">+---------------+-------+</span><br><span class="line"><span class="number">1</span> <span class="function">row in <span class="title">set</span> <span class="params">(<span class="number">0.00</span> sec)</span></span></span><br><span class="line"><span class="function">————————————————</span></span><br><span class="line"><span class="function">如果显示状态为ON表示该功能已开启</span></span><br></pre></td></tr></table></figure><p>（3）在mysql里面添加以下的相关用户和权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;canal&#x27;</span>;</span><br><span class="line">GRANT SHOW VIEW, SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p><strong>3、下载安装Canal服务</strong><br>下载地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//github.com/alibaba/canal/releases</span></span><br></pre></td></tr></table></figure><p>（1）下载之后，放到目录中，解压文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/canal</span><br><span class="line"></span><br><span class="line">canal.deployer-<span class="number">1.1</span><span class="number">.4</span>.tar.gz</span><br><span class="line"></span><br><span class="line">tar zxvf canal.deployer-<span class="number">1.1</span><span class="number">.4</span>.tar.gz</span><br></pre></td></tr></table></figure><p>（2）修改配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi conf/example/instance.properties</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#需要改成自己的数据库信息</span><br><span class="line">canal.instance.master.address=<span class="number">192.168</span><span class="number">.44</span><span class="number">.132</span>:<span class="number">3306</span></span><br><span class="line"></span><br><span class="line">#需要改成自己的数据库用户名与密码</span><br><span class="line"></span><br><span class="line">canal.instance.dbUsername=canal</span><br><span class="line">canal.instance.dbPassword=canal</span><br><span class="line"></span><br><span class="line">#需要改成同步的数据库表规则，例如只是同步一下表</span><br><span class="line">#canal.instance.filter.regex=.*\\..*</span><br><span class="line">canal.instance.filter.regex=guli_ucenter.ucenter_member</span><br></pre></td></tr></table></figure><p>注：</p><p>*mysql 数据解析关注的表，Perl正则表达式.多个正则之间以逗号(,)分隔，转义符需要双斜杠(\) 常见例子：</p><ol><li> 所有表：.*   or  .<em>\..</em>      </li><li> canal schema下所有表： canal\..*</li><li> canal下的以canal打头的表：canal\.canal.*</li><li> canal schema下的一张表：canal.test1</li><li> 多个规则组合使用：canal\..<em>,mysql.test1,mysql.test2 (逗号分隔)<br>注意：此过滤条件只针对row模式的数据有效(ps. mixed/statement因为不解析sql，所以无法准确提取tableName进行过滤)</em></li></ol><p>（3）进入bin目录下启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/startup.sh</span><br></pre></td></tr></table></figure><h4 id="二、创建canal-client模块"><a href="#二、创建canal-client模块" class="headerlink" title="二、创建canal_client模块"></a>二、创建canal_client模块</h4><p><strong>1、在parent下创建canal_client模块</strong><br><img src="https://img-blog.csdnimg.cn/20200622205759866.png" alt="在这里插入图片描述"><strong>2、引入相关依赖</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--mysql--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-dbutils&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-dbutils&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.otter&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;canal.client&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p><strong>3、创建application.properties配置文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 服务端口</span><br><span class="line">server.port=<span class="number">10000</span></span><br><span class="line"># 服务名</span><br><span class="line">spring.application.name=canal-client</span><br><span class="line"></span><br><span class="line"># 环境设置：dev、test、prod</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line"></span><br><span class="line"># mysql数据库连接</span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br></pre></td></tr></table></figure><p><strong>4、编写canal客户端类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnector;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnectors;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.Message;</span><br><span class="line"><span class="keyword">import</span> com.google.protobuf.InvalidProtocolBufferException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.DbUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanalClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sql队列</span></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;String&gt; SQL_QUEUE = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * canal入库方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CanalConnector connector = CanalConnectors.newSingleConnector(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;192.168.44.132&quot;</span>,</span><br><span class="line">                <span class="number">11111</span>), <span class="string">&quot;example&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> batchSize = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connector.connect();</span><br><span class="line">            connector.subscribe(<span class="string">&quot;.*\\..*&quot;</span>);</span><br><span class="line">            connector.rollback();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="comment">//尝试从master那边拉去数据batchSize条记录，有多少取多少</span></span><br><span class="line">                    Message message = connector.getWithoutAck(batchSize);</span><br><span class="line">                    <span class="keyword">long</span> batchId = message.getId();</span><br><span class="line">                    <span class="keyword">int</span> size = message.getEntries().size();</span><br><span class="line">                    <span class="keyword">if</span> (batchId == -<span class="number">1</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        dataHandle(message.getEntries());</span><br><span class="line">                    &#125;</span><br><span class="line">                    connector.ack(batchId);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//当队列里面堆积的sql大于一定数值的时候就模拟执行</span></span><br><span class="line">                    <span class="keyword">if</span> (SQL_QUEUE.size() &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                        executeQueueSql();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connector.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟执行队列里面的sql语句</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeQueueSql</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = SQL_QUEUE.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            String sql = SQL_QUEUE.poll();</span><br><span class="line">            System.out.println(<span class="string">&quot;[sql]----&gt; &quot;</span> + sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.execute(sql.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entrys</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dataHandle</span><span class="params">(List&lt;Entry&gt; entrys)</span> <span class="keyword">throws</span> InvalidProtocolBufferException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry entry : entrys) &#123;</span><br><span class="line">            <span class="keyword">if</span> (EntryType.ROWDATA == entry.getEntryType()) &#123;</span><br><span class="line">                RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">                EventType eventType = rowChange.getEventType();</span><br><span class="line">                <span class="keyword">if</span> (eventType == EventType.DELETE) &#123;</span><br><span class="line">                    saveDeleteSql(entry);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType == EventType.UPDATE) &#123;</span><br><span class="line">                    saveUpdateSql(entry);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType == EventType.INSERT) &#123;</span><br><span class="line">                    saveInsertSql(entry);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存更新语句</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveUpdateSql</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            List&lt;RowData&gt; rowDatasList = rowChange.getRowDatasList();</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowDatasList) &#123;</span><br><span class="line">                List&lt;Column&gt; newColumnList = rowData.getAfterColumnsList();</span><br><span class="line">                StringBuffer sql = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;update &quot;</span> + entry.getHeader().getTableName() + <span class="string">&quot; set &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newColumnList.size(); i++) &#123;</span><br><span class="line">                    sql.append(<span class="string">&quot; &quot;</span> + newColumnList.get(i).getName()</span><br><span class="line">                            + <span class="string">&quot; = &#x27;&quot;</span> + newColumnList.get(i).getValue() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i != newColumnList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                        sql.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sql.append(<span class="string">&quot; where &quot;</span>);</span><br><span class="line">                List&lt;Column&gt; oldColumnList = rowData.getBeforeColumnsList();</span><br><span class="line">                <span class="keyword">for</span> (Column column : oldColumnList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (column.getIsKey()) &#123;</span><br><span class="line">                        <span class="comment">//暂时只支持单一主键</span></span><br><span class="line">                        sql.append(column.getName() + <span class="string">&quot;=&quot;</span> + column.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                SQL_QUEUE.add(sql.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存删除语句</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveDeleteSql</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            List&lt;RowData&gt; rowDatasList = rowChange.getRowDatasList();</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowDatasList) &#123;</span><br><span class="line">                List&lt;Column&gt; columnList = rowData.getBeforeColumnsList();</span><br><span class="line">                StringBuffer sql = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;delete from &quot;</span> + entry.getHeader().getTableName() + <span class="string">&quot; where &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Column column : columnList) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (column.getIsKey()) &#123;</span><br><span class="line">                        <span class="comment">//暂时只支持单一主键</span></span><br><span class="line">                        sql.append(column.getName() + <span class="string">&quot;=&quot;</span> + column.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                SQL_QUEUE.add(sql.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存插入语句</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveInsertSql</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RowChange rowChange = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            List&lt;RowData&gt; rowDatasList = rowChange.getRowDatasList();</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowDatasList) &#123;</span><br><span class="line">                List&lt;Column&gt; columnList = rowData.getAfterColumnsList();</span><br><span class="line">                StringBuffer sql = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;insert into &quot;</span> + entry.getHeader().getTableName() + <span class="string">&quot; (&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnList.size(); i++) &#123;</span><br><span class="line">                    sql.append(columnList.get(i).getName());</span><br><span class="line">                    <span class="keyword">if</span> (i != columnList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                        sql.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sql.append(<span class="string">&quot;) VALUES (&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnList.size(); i++) &#123;</span><br><span class="line">                    sql.append(<span class="string">&quot;&#x27;&quot;</span> + columnList.get(i).getValue() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i != columnList.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                        sql.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sql.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                SQL_QUEUE.add(sql.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> == sql) <span class="keyword">return</span>;</span><br><span class="line">            con = dataSource.getConnection();</span><br><span class="line">            QueryRunner qr = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">            <span class="keyword">int</span> row = qr.execute(con, sql);</span><br><span class="line">            System.out.println(<span class="string">&quot;update: &quot;</span>+ row);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.closeQuietly(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、创建启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanalApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CanalClient canalClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CanalApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//项目启动，执行canal客户端监听</span></span><br><span class="line">        canalClient.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">canal是阿里巴巴旗下的一款开源项目，纯Java开发。基于数据库增量日志解析，提供增量数据订阅&amp;消费，目前主要支持了MySQL。</summary>
    
    
    
    <category term="后端开发" scheme="https://www.lianghuan.zone/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java后端" scheme="https://www.lianghuan.zone/tags/Java%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Linux" scheme="https://www.lianghuan.zone/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.lianghuan.zone/2021/04/24/hello-world/"/>
    <id>https://www.lianghuan.zone/2021/04/24/hello-world/</id>
    <published>2021-04-23T16:34:20.599Z</published>
    <updated>2021-04-23T15:52:20.598Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
